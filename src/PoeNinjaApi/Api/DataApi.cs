/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PoeNinjaApi.Client;
using PoeNinjaApi.Model;

namespace PoeNinjaApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <returns>CurrencyHistory</returns>
        CurrencyHistory DataCurrencyHistory(string league = default(string), string type = default(string), int? currencyId = default(int?));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <returns>ApiResponse of CurrencyHistory</returns>
        ApiResponse<CurrencyHistory> DataCurrencyHistoryWithHttpInfo(string league = default(string), string type = default(string), int? currencyId = default(int?));
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>CurrencyOverviewModel</returns>
        CurrencyOverviewModel DataCurrencyOverview(string league = default(string), string type = default(string), string language = default(string));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ApiResponse of CurrencyOverviewModel</returns>
        ApiResponse<CurrencyOverviewModel> DataCurrencyOverviewWithHttpInfo(string league = default(string), string type = default(string), string language = default(string));
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="whatever"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>List&lt;OverviewSnapshot&gt;</returns>
        OverviewSnapshot DataGetBuildOverview(string whatever, string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="whatever"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ApiResponse of List&lt;OverviewSnapshot&gt;</returns>
        ApiResponse<OverviewSnapshot> DataGetBuildOverviewWithHttpInfo(string whatever, string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string));
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="account"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>CharModel</returns>
        CharModel DataGetCharacter(string version, string account = default(string), string name = default(string), string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="account"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ApiResponse of CharModel</returns>
        ApiResponse<CharModel> DataGetCharacterWithHttpInfo(string version, string account = default(string), string name = default(string), string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string));
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DataGetRules();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DataGetRulesWithHttpInfo();
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Settings</returns>
        Settings DataGetStats();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Settings</returns>
        ApiResponse<Settings> DataGetStatsWithHttpInfo();
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="tooltip"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>TooltipItem</returns>
        TooltipItem DataGetTooltip(string version, string overview = default(string), string tooltip = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="tooltip"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ApiResponse of TooltipItem</returns>
        ApiResponse<TooltipItem> DataGetTooltipWithHttpInfo(string version, string overview = default(string), string tooltip = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string));
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="itemId"> (optional)</param>
        /// <returns>List&lt;GraphData&gt;</returns>
        List<GraphData> DataItemHistory(string league = default(string), string type = default(string), int? itemId = default(int?));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="itemId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GraphData&gt;</returns>
        ApiResponse<List<GraphData>> DataItemHistoryWithHttpInfo(string league = default(string), string type = default(string), int? itemId = default(int?));
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ItemOverviewModel</returns>
        ItemOverviewModel DataItemOverview(string league = default(string), string type = default(string), string language = default(string));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ApiResponse of ItemOverviewModel</returns>
        ApiResponse<ItemOverviewModel> DataItemOverviewWithHttpInfo(string league = default(string), string type = default(string), string language = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencyHistory</returns>
        System.Threading.Tasks.Task<CurrencyHistory> DataCurrencyHistoryAsync(string league = default(string), string type = default(string), int? currencyId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencyHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencyHistory>> DataCurrencyHistoryWithHttpInfoAsync(string league = default(string), string type = default(string), int? currencyId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencyOverviewModel</returns>
        System.Threading.Tasks.Task<CurrencyOverviewModel> DataCurrencyOverviewAsync(string league = default(string), string type = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencyOverviewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencyOverviewModel>> DataCurrencyOverviewWithHttpInfoAsync(string league = default(string), string type = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="whatever"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OverviewSnapshot&gt;</returns>
        System.Threading.Tasks.Task<OverviewSnapshot> DataGetBuildOverviewAsync(string whatever, string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="whatever"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OverviewSnapshot&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<OverviewSnapshot>> DataGetBuildOverviewWithHttpInfoAsync(string whatever, string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="account"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CharModel</returns>
        System.Threading.Tasks.Task<CharModel> DataGetCharacterAsync(string version, string account = default(string), string name = default(string), string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="account"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CharModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CharModel>> DataGetCharacterWithHttpInfoAsync(string version, string account = default(string), string name = default(string), string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DataGetRulesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DataGetRulesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Settings</returns>
        System.Threading.Tasks.Task<Settings> DataGetStatsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        System.Threading.Tasks.Task<ApiResponse<Settings>> DataGetStatsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="tooltip"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TooltipItem</returns>
        System.Threading.Tasks.Task<TooltipItem> DataGetTooltipAsync(string version, string overview = default(string), string tooltip = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="tooltip"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TooltipItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<TooltipItem>> DataGetTooltipWithHttpInfoAsync(string version, string overview = default(string), string tooltip = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="itemId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GraphData&gt;</returns>
        System.Threading.Tasks.Task<List<GraphData>> DataItemHistoryAsync(string league = default(string), string type = default(string), int? itemId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="itemId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GraphData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GraphData>>> DataItemHistoryWithHttpInfoAsync(string league = default(string), string type = default(string), int? itemId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemOverviewModel</returns>
        System.Threading.Tasks.Task<ItemOverviewModel> DataItemOverviewAsync(string league = default(string), string type = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemOverviewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemOverviewModel>> DataItemOverviewWithHttpInfoAsync(string league = default(string), string type = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApi : IDataApiSync, IDataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataApi : IDataApi
    {
        private PoeNinjaApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi(String basePath)
        {
            this.Configuration = PoeNinjaApi.Client.Configuration.MergeConfigurations(
                PoeNinjaApi.Client.GlobalConfiguration.Instance,
                new PoeNinjaApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PoeNinjaApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PoeNinjaApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PoeNinjaApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataApi(PoeNinjaApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PoeNinjaApi.Client.Configuration.MergeConfigurations(
                PoeNinjaApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PoeNinjaApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PoeNinjaApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PoeNinjaApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataApi(PoeNinjaApi.Client.ISynchronousClient client, PoeNinjaApi.Client.IAsynchronousClient asyncClient, PoeNinjaApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PoeNinjaApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PoeNinjaApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PoeNinjaApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PoeNinjaApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PoeNinjaApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <returns>CurrencyHistory</returns>
        public CurrencyHistory DataCurrencyHistory(string league = default(string), string type = default(string), int? currencyId = default(int?))
        {
            PoeNinjaApi.Client.ApiResponse<CurrencyHistory> localVarResponse = DataCurrencyHistoryWithHttpInfo(league, type, currencyId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <returns>ApiResponse of CurrencyHistory</returns>
        public PoeNinjaApi.Client.ApiResponse<CurrencyHistory> DataCurrencyHistoryWithHttpInfo(string league = default(string), string type = default(string), int? currencyId = default(int?))
        {
            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (league != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "league", league));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "currencyId", currencyId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CurrencyHistory>("/api/data/CurrencyHistory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataCurrencyHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencyHistory</returns>
        public async System.Threading.Tasks.Task<CurrencyHistory> DataCurrencyHistoryAsync(string league = default(string), string type = default(string), int? currencyId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PoeNinjaApi.Client.ApiResponse<CurrencyHistory> localVarResponse = await DataCurrencyHistoryWithHttpInfoAsync(league, type, currencyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="currencyId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencyHistory)</returns>
        public async System.Threading.Tasks.Task<PoeNinjaApi.Client.ApiResponse<CurrencyHistory>> DataCurrencyHistoryWithHttpInfoAsync(string league = default(string), string type = default(string), int? currencyId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (league != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "league", league));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "currencyId", currencyId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CurrencyHistory>("/api/data/CurrencyHistory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataCurrencyHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>CurrencyOverviewModel</returns>
        public CurrencyOverviewModel DataCurrencyOverview(string league = default(string), string type = default(string), string language = default(string))
        {
            PoeNinjaApi.Client.ApiResponse<CurrencyOverviewModel> localVarResponse = DataCurrencyOverviewWithHttpInfo(league, type, language);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ApiResponse of CurrencyOverviewModel</returns>
        public PoeNinjaApi.Client.ApiResponse<CurrencyOverviewModel> DataCurrencyOverviewWithHttpInfo(string league = default(string), string type = default(string), string language = default(string))
        {
            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (league != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "league", league));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CurrencyOverviewModel>("/api/data/CurrencyOverview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataCurrencyOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencyOverviewModel</returns>
        public async System.Threading.Tasks.Task<CurrencyOverviewModel> DataCurrencyOverviewAsync(string league = default(string), string type = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PoeNinjaApi.Client.ApiResponse<CurrencyOverviewModel> localVarResponse = await DataCurrencyOverviewWithHttpInfoAsync(league, type, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencyOverviewModel)</returns>
        public async System.Threading.Tasks.Task<PoeNinjaApi.Client.ApiResponse<CurrencyOverviewModel>> DataCurrencyOverviewWithHttpInfoAsync(string league = default(string), string type = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (league != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "league", league));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CurrencyOverviewModel>("/api/data/CurrencyOverview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataCurrencyOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="whatever"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>List&lt;OverviewSnapshot&gt;</returns>
        public OverviewSnapshot DataGetBuildOverview(string whatever, string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string))
        {
            PoeNinjaApi.Client.ApiResponse<OverviewSnapshot> localVarResponse = DataGetBuildOverviewWithHttpInfo(whatever, overview, type, timeMachine, language);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="whatever"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ApiResponse of List&lt;OverviewSnapshot&gt;</returns>
        public PoeNinjaApi.Client.ApiResponse<OverviewSnapshot> DataGetBuildOverviewWithHttpInfo(string whatever, string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string))
        {
            // verify the required parameter 'whatever' is set
            if (whatever == null)
                throw new PoeNinjaApi.Client.ApiException(400, "Missing required parameter 'whatever' when calling DataApi->DataGetBuildOverview");

            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("whatever", PoeNinjaApi.Client.ClientUtils.ParameterToString(whatever)); // path parameter
            if (overview != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "overview", overview));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (timeMachine != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "timeMachine", timeMachine));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<OverviewSnapshot>("/api/data/{whatever}/GetBuildOverview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGetBuildOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="whatever"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OverviewSnapshot&gt;</returns>
        public async System.Threading.Tasks.Task<OverviewSnapshot> DataGetBuildOverviewAsync(string whatever, string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PoeNinjaApi.Client.ApiResponse<OverviewSnapshot> localVarResponse = await DataGetBuildOverviewWithHttpInfoAsync(whatever, overview, type, timeMachine, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="whatever"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OverviewSnapshot&gt;)</returns>
        public async System.Threading.Tasks.Task<PoeNinjaApi.Client.ApiResponse<OverviewSnapshot>> DataGetBuildOverviewWithHttpInfoAsync(string whatever, string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'whatever' is set
            if (whatever == null)
                throw new PoeNinjaApi.Client.ApiException(400, "Missing required parameter 'whatever' when calling DataApi->DataGetBuildOverview");


            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("whatever", PoeNinjaApi.Client.ClientUtils.ParameterToString(whatever)); // path parameter
            if (overview != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "overview", overview));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (timeMachine != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "timeMachine", timeMachine));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OverviewSnapshot>("/api/data/{whatever}/GetBuildOverview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGetBuildOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="account"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>CharModel</returns>
        public CharModel DataGetCharacter(string version, string account = default(string), string name = default(string), string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string))
        {
            PoeNinjaApi.Client.ApiResponse<CharModel> localVarResponse = DataGetCharacterWithHttpInfo(version, account, name, overview, type, timeMachine, language);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="account"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ApiResponse of CharModel</returns>
        public PoeNinjaApi.Client.ApiResponse<CharModel> DataGetCharacterWithHttpInfo(string version, string account = default(string), string name = default(string), string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new PoeNinjaApi.Client.ApiException(400, "Missing required parameter 'version' when calling DataApi->DataGetCharacter");

            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", PoeNinjaApi.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (overview != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "overview", overview));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (timeMachine != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "timeMachine", timeMachine));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CharModel>("/api/data/{version}/GetCharacter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGetCharacter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="account"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CharModel</returns>
        public async System.Threading.Tasks.Task<CharModel> DataGetCharacterAsync(string version, string account = default(string), string name = default(string), string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PoeNinjaApi.Client.ApiResponse<CharModel> localVarResponse = await DataGetCharacterWithHttpInfoAsync(version, account, name, overview, type, timeMachine, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="account"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="overview"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CharModel)</returns>
        public async System.Threading.Tasks.Task<PoeNinjaApi.Client.ApiResponse<CharModel>> DataGetCharacterWithHttpInfoAsync(string version, string account = default(string), string name = default(string), string overview = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new PoeNinjaApi.Client.ApiException(400, "Missing required parameter 'version' when calling DataApi->DataGetCharacter");


            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", PoeNinjaApi.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (overview != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "overview", overview));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (timeMachine != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "timeMachine", timeMachine));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CharModel>("/api/data/{version}/GetCharacter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGetCharacter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DataGetRules()
        {
            PoeNinjaApi.Client.ApiResponse<System.IO.Stream> localVarResponse = DataGetRulesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public PoeNinjaApi.Client.ApiResponse<System.IO.Stream> DataGetRulesWithHttpInfo()
        {
            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/api/data/GetRules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGetRules", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DataGetRulesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PoeNinjaApi.Client.ApiResponse<System.IO.Stream> localVarResponse = await DataGetRulesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<PoeNinjaApi.Client.ApiResponse<System.IO.Stream>> DataGetRulesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };


            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/api/data/GetRules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGetRules", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Settings</returns>
        public Settings DataGetStats()
        {
            PoeNinjaApi.Client.ApiResponse<Settings> localVarResponse = DataGetStatsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Settings</returns>
        public PoeNinjaApi.Client.ApiResponse<Settings> DataGetStatsWithHttpInfo()
        {
            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Settings>("/api/data/GetStats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGetStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Settings</returns>
        public async System.Threading.Tasks.Task<Settings> DataGetStatsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PoeNinjaApi.Client.ApiResponse<Settings> localVarResponse = await DataGetStatsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        public async System.Threading.Tasks.Task<PoeNinjaApi.Client.ApiResponse<Settings>> DataGetStatsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Settings>("/api/data/GetStats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGetStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="tooltip"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>TooltipItem</returns>
        public TooltipItem DataGetTooltip(string version, string overview = default(string), string tooltip = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string))
        {
            PoeNinjaApi.Client.ApiResponse<TooltipItem> localVarResponse = DataGetTooltipWithHttpInfo(version, overview, tooltip, type, timeMachine, language);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="tooltip"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ApiResponse of TooltipItem</returns>
        public PoeNinjaApi.Client.ApiResponse<TooltipItem> DataGetTooltipWithHttpInfo(string version, string overview = default(string), string tooltip = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new PoeNinjaApi.Client.ApiException(400, "Missing required parameter 'version' when calling DataApi->DataGetTooltip");

            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", PoeNinjaApi.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (overview != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "overview", overview));
            }
            if (tooltip != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "tooltip", tooltip));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (timeMachine != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "timeMachine", timeMachine));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<TooltipItem>("/api/data/{version}/GetTooltip", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGetTooltip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="tooltip"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TooltipItem</returns>
        public async System.Threading.Tasks.Task<TooltipItem> DataGetTooltipAsync(string version, string overview = default(string), string tooltip = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PoeNinjaApi.Client.ApiResponse<TooltipItem> localVarResponse = await DataGetTooltipWithHttpInfoAsync(version, overview, tooltip, type, timeMachine, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="overview"> (optional)</param>
        /// <param name="tooltip"> (optional)</param>
        /// <param name="type"> (optional, default to 0)</param>
        /// <param name="timeMachine"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TooltipItem)</returns>
        public async System.Threading.Tasks.Task<PoeNinjaApi.Client.ApiResponse<TooltipItem>> DataGetTooltipWithHttpInfoAsync(string version, string overview = default(string), string tooltip = default(string), int? type = default(int?), string timeMachine = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new PoeNinjaApi.Client.ApiException(400, "Missing required parameter 'version' when calling DataApi->DataGetTooltip");


            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", PoeNinjaApi.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (overview != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "overview", overview));
            }
            if (tooltip != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "tooltip", tooltip));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (timeMachine != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "timeMachine", timeMachine));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TooltipItem>("/api/data/{version}/GetTooltip", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataGetTooltip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="itemId"> (optional)</param>
        /// <returns>List&lt;GraphData&gt;</returns>
        public List<GraphData> DataItemHistory(string league = default(string), string type = default(string), int? itemId = default(int?))
        {
            PoeNinjaApi.Client.ApiResponse<List<GraphData>> localVarResponse = DataItemHistoryWithHttpInfo(league, type, itemId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="itemId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GraphData&gt;</returns>
        public PoeNinjaApi.Client.ApiResponse<List<GraphData>> DataItemHistoryWithHttpInfo(string league = default(string), string type = default(string), int? itemId = default(int?))
        {
            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (league != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "league", league));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (itemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "itemId", itemId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GraphData>>("/api/data/ItemHistory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataItemHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="itemId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GraphData&gt;</returns>
        public async System.Threading.Tasks.Task<List<GraphData>> DataItemHistoryAsync(string league = default(string), string type = default(string), int? itemId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PoeNinjaApi.Client.ApiResponse<List<GraphData>> localVarResponse = await DataItemHistoryWithHttpInfoAsync(league, type, itemId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="itemId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GraphData&gt;)</returns>
        public async System.Threading.Tasks.Task<PoeNinjaApi.Client.ApiResponse<List<GraphData>>> DataItemHistoryWithHttpInfoAsync(string league = default(string), string type = default(string), int? itemId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (league != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "league", league));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (itemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "itemId", itemId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GraphData>>("/api/data/ItemHistory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataItemHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ItemOverviewModel</returns>
        public ItemOverviewModel DataItemOverview(string league = default(string), string type = default(string), string language = default(string))
        {
            PoeNinjaApi.Client.ApiResponse<ItemOverviewModel> localVarResponse = DataItemOverviewWithHttpInfo(league, type, language);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <returns>ApiResponse of ItemOverviewModel</returns>
        public PoeNinjaApi.Client.ApiResponse<ItemOverviewModel> DataItemOverviewWithHttpInfo(string league = default(string), string type = default(string), string language = default(string))
        {
            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (league != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "league", league));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ItemOverviewModel>("/api/data/ItemOverview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataItemOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemOverviewModel</returns>
        public async System.Threading.Tasks.Task<ItemOverviewModel> DataItemOverviewAsync(string league = default(string), string type = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PoeNinjaApi.Client.ApiResponse<ItemOverviewModel> localVarResponse = await DataItemOverviewWithHttpInfoAsync(league, type, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="PoeNinjaApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="league"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="language"> (optional, default to &quot;en&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemOverviewModel)</returns>
        public async System.Threading.Tasks.Task<PoeNinjaApi.Client.ApiResponse<ItemOverviewModel>> DataItemOverviewWithHttpInfoAsync(string league = default(string), string type = default(string), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PoeNinjaApi.Client.RequestOptions localVarRequestOptions = new PoeNinjaApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = PoeNinjaApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PoeNinjaApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (league != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "league", league));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PoeNinjaApi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ItemOverviewModel>("/api/data/ItemOverview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DataItemOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
