/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PoeNinjaApi.Client.OpenAPIDateConverter;

namespace PoeNinjaApi.Model
{
    /// <summary>
    /// TooltipItem
    /// </summary>
    [DataContract(Name = "TooltipItem")]
    public partial class TooltipItem : IEquatable<TooltipItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TooltipItem" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="implicitMods">implicitMods.</param>
        /// <param name="explicitMods">explicitMods.</param>
        /// <param name="typeLine">typeLine.</param>
        /// <param name="icon">icon.</param>
        /// <param name="flavourText">flavourText.</param>
        public TooltipItem(string name = default(string), List<OverviewModifier> implicitMods = default(List<OverviewModifier>), List<OverviewModifier> explicitMods = default(List<OverviewModifier>), string typeLine = default(string), string icon = default(string), string flavourText = default(string))
        {
            this.Name = name;
            this.ImplicitMods = implicitMods;
            this.ExplicitMods = explicitMods;
            this.TypeLine = typeLine;
            this.Icon = icon;
            this.FlavourText = flavourText;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ImplicitMods
        /// </summary>
        [DataMember(Name = "implicitMods", EmitDefaultValue = false)]
        public List<OverviewModifier> ImplicitMods { get; set; }

        /// <summary>
        /// Gets or Sets ExplicitMods
        /// </summary>
        [DataMember(Name = "explicitMods", EmitDefaultValue = false)]
        public List<OverviewModifier> ExplicitMods { get; set; }

        /// <summary>
        /// Gets or Sets TypeLine
        /// </summary>
        [DataMember(Name = "typeLine", EmitDefaultValue = false)]
        public string TypeLine { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets FlavourText
        /// </summary>
        [DataMember(Name = "flavourText", EmitDefaultValue = false)]
        public string FlavourText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TooltipItem {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImplicitMods: ").Append(ImplicitMods).Append("\n");
            sb.Append("  ExplicitMods: ").Append(ExplicitMods).Append("\n");
            sb.Append("  TypeLine: ").Append(TypeLine).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  FlavourText: ").Append(FlavourText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TooltipItem);
        }

        /// <summary>
        /// Returns true if TooltipItem instances are equal
        /// </summary>
        /// <param name="input">Instance of TooltipItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TooltipItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ImplicitMods == input.ImplicitMods ||
                    this.ImplicitMods != null &&
                    input.ImplicitMods != null &&
                    this.ImplicitMods.SequenceEqual(input.ImplicitMods)
                ) && 
                (
                    this.ExplicitMods == input.ExplicitMods ||
                    this.ExplicitMods != null &&
                    input.ExplicitMods != null &&
                    this.ExplicitMods.SequenceEqual(input.ExplicitMods)
                ) && 
                (
                    this.TypeLine == input.TypeLine ||
                    (this.TypeLine != null &&
                    this.TypeLine.Equals(input.TypeLine))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.FlavourText == input.FlavourText ||
                    (this.FlavourText != null &&
                    this.FlavourText.Equals(input.FlavourText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ImplicitMods != null)
                    hashCode = hashCode * 59 + this.ImplicitMods.GetHashCode();
                if (this.ExplicitMods != null)
                    hashCode = hashCode * 59 + this.ExplicitMods.GetHashCode();
                if (this.TypeLine != null)
                    hashCode = hashCode * 59 + this.TypeLine.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.FlavourText != null)
                    hashCode = hashCode * 59 + this.FlavourText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
