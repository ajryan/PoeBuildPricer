/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PoeNinjaApi.Client.OpenAPIDateConverter;

namespace PoeNinjaApi.Model
{
    /// <summary>
    /// OverviewSnapshot
    /// </summary>
    [DataContract(Name = "OverviewSnapshot")]
    public partial class OverviewSnapshot : IEquatable<OverviewSnapshot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewSnapshot" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OverviewSnapshot() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewSnapshot" /> class.
        /// </summary>
        /// <param name="classNames">classNames.</param>
        /// <param name="classes">classes.</param>
        /// <param name="uniqueItems">uniqueItems.</param>
        /// <param name="uniqueItemUse">uniqueItemUse.</param>
        /// <param name="activeSkills">activeSkills.</param>
        /// <param name="activeSkillUse">activeSkillUse.</param>
        /// <param name="allSkills">allSkills.</param>
        /// <param name="allSkillUse">allSkillUse.</param>
        /// <param name="keystones">keystones.</param>
        /// <param name="keystoneUse">keystoneUse.</param>
        /// <param name="levels">levels.</param>
        /// <param name="life">life.</param>
        /// <param name="energyShield">energyShield.</param>
        /// <param name="weaponConfigurationTypeUse">weaponConfigurationTypeUse.</param>
        /// <param name="weaponConfigurationTypes">weaponConfigurationTypes.</param>
        /// <param name="names">names.</param>
        /// <param name="accounts">accounts.</param>
        /// <param name="ladderRanks">ladderRanks.</param>
        /// <param name="updatedUtc">updatedUtc (required).</param>
        /// <param name="skillModes">skillModes.</param>
        /// <param name="skillModeUse">skillModeUse.</param>
        /// <param name="skillDetails">skillDetails.</param>
        /// <param name="delveSolo">delveSolo.</param>
        /// <param name="language">language.</param>
        /// <param name="intervals">intervals.</param>
        /// <param name="intervalNames">intervalNames.</param>
        /// <param name="leagues">leagues.</param>
        /// <param name="leagueNames">leagueNames.</param>
        /// <param name="twitchAccounts">twitchAccounts.</param>
        /// <param name="twitchNames">twitchNames.</param>
        /// <param name="online">online.</param>
        /// <param name="uniqueItemTooltips">uniqueItemTooltips.</param>
        /// <param name="keystoneTooltips">keystoneTooltips.</param>
        public OverviewSnapshot(List<string> classNames = default(List<string>), List<int> classes = default(List<int>), List<OverviewUniqueItem> uniqueItems = default(List<OverviewUniqueItem>), Dictionary<string, List<int>> uniqueItemUse = default(Dictionary<string, List<int>>), List<OverviewSkillGem> activeSkills = default(List<OverviewSkillGem>), Dictionary<string, List<int>> activeSkillUse = default(Dictionary<string, List<int>>), List<OverviewSkillGem> allSkills = default(List<OverviewSkillGem>), Dictionary<string, List<int>> allSkillUse = default(Dictionary<string, List<int>>), List<OverviewKeystone> keystones = default(List<OverviewKeystone>), Dictionary<string, List<int>> keystoneUse = default(Dictionary<string, List<int>>), List<int> levels = default(List<int>), List<int> life = default(List<int>), List<int> energyShield = default(List<int>), List<WeaponConfigurationType> weaponConfigurationTypeUse = default(List<WeaponConfigurationType>), List<OverviewWeaponConfigurationType> weaponConfigurationTypes = default(List<OverviewWeaponConfigurationType>), List<string> names = default(List<string>), List<string> accounts = default(List<string>), List<int?> ladderRanks = default(List<int?>), DateTime updatedUtc = default(DateTime), List<OverviewSkillMode> skillModes = default(List<OverviewSkillMode>), Dictionary<string, List<int>> skillModeUse = default(Dictionary<string, List<int>>), List<SkillDetailsInfo> skillDetails = default(List<SkillDetailsInfo>), List<int> delveSolo = default(List<int>), TranslationLanguage language = default(TranslationLanguage), List<int> intervals = default(List<int>), List<string> intervalNames = default(List<string>), List<int> leagues = default(List<int>), List<string> leagueNames = default(List<string>), List<string> twitchAccounts = default(List<string>), List<string> twitchNames = default(List<string>), List<bool> online = default(List<bool>), List<bool> uniqueItemTooltips = default(List<bool>), List<bool> keystoneTooltips = default(List<bool>))
        {
            this.UpdatedUtc = updatedUtc;
            this.ClassNames = classNames;
            this.Classes = classes;
            this.UniqueItems = uniqueItems;
            this.UniqueItemUse = uniqueItemUse;
            this.ActiveSkills = activeSkills;
            this.ActiveSkillUse = activeSkillUse;
            this.AllSkills = allSkills;
            this.AllSkillUse = allSkillUse;
            this.Keystones = keystones;
            this.KeystoneUse = keystoneUse;
            this.Levels = levels;
            this.Life = life;
            this.EnergyShield = energyShield;
            this.WeaponConfigurationTypeUse = weaponConfigurationTypeUse;
            this.WeaponConfigurationTypes = weaponConfigurationTypes;
            this.Names = names;
            this.Accounts = accounts;
            this.LadderRanks = ladderRanks;
            this.SkillModes = skillModes;
            this.SkillModeUse = skillModeUse;
            this.SkillDetails = skillDetails;
            this.DelveSolo = delveSolo;
            this.Language = language;
            this.Intervals = intervals;
            this.IntervalNames = intervalNames;
            this.Leagues = leagues;
            this.LeagueNames = leagueNames;
            this.TwitchAccounts = twitchAccounts;
            this.TwitchNames = twitchNames;
            this.Online = online;
            this.UniqueItemTooltips = uniqueItemTooltips;
            this.KeystoneTooltips = keystoneTooltips;
        }

        /// <summary>
        /// Gets or Sets ClassNames
        /// </summary>
        [DataMember(Name = "classNames", EmitDefaultValue = false)]
        public List<string> ClassNames { get; set; }

        /// <summary>
        /// Gets or Sets Classes
        /// </summary>
        [DataMember(Name = "classes", EmitDefaultValue = false)]
        public List<int> Classes { get; set; }

        /// <summary>
        /// Gets or Sets UniqueItems
        /// </summary>
        [DataMember(Name = "uniqueItems", EmitDefaultValue = false)]
        public List<OverviewUniqueItem> UniqueItems { get; set; }

        /// <summary>
        /// Gets or Sets UniqueItemUse
        /// </summary>
        [DataMember(Name = "uniqueItemUse", EmitDefaultValue = false)]
        public Dictionary<string, List<int>> UniqueItemUse { get; set; }

        /// <summary>
        /// Gets or Sets ActiveSkills
        /// </summary>
        [DataMember(Name = "activeSkills", EmitDefaultValue = false)]
        public List<OverviewSkillGem> ActiveSkills { get; set; }

        /// <summary>
        /// Gets or Sets ActiveSkillUse
        /// </summary>
        [DataMember(Name = "activeSkillUse", EmitDefaultValue = false)]
        public Dictionary<string, List<int>> ActiveSkillUse { get; set; }

        /// <summary>
        /// Gets or Sets AllSkills
        /// </summary>
        [DataMember(Name = "allSkills", EmitDefaultValue = false)]
        public List<OverviewSkillGem> AllSkills { get; set; }

        /// <summary>
        /// Gets or Sets AllSkillUse
        /// </summary>
        [DataMember(Name = "allSkillUse", EmitDefaultValue = false)]
        public Dictionary<string, List<int>> AllSkillUse { get; set; }

        /// <summary>
        /// Gets or Sets Keystones
        /// </summary>
        [DataMember(Name = "keystones", EmitDefaultValue = false)]
        public List<OverviewKeystone> Keystones { get; set; }

        /// <summary>
        /// Gets or Sets KeystoneUse
        /// </summary>
        [DataMember(Name = "keystoneUse", EmitDefaultValue = false)]
        public Dictionary<string, List<int>> KeystoneUse { get; set; }

        /// <summary>
        /// Gets or Sets Levels
        /// </summary>
        [DataMember(Name = "levels", EmitDefaultValue = false)]
        public List<int> Levels { get; set; }

        /// <summary>
        /// Gets or Sets Life
        /// </summary>
        [DataMember(Name = "life", EmitDefaultValue = false)]
        public List<int> Life { get; set; }

        /// <summary>
        /// Gets or Sets EnergyShield
        /// </summary>
        [DataMember(Name = "energyShield", EmitDefaultValue = false)]
        public List<int> EnergyShield { get; set; }

        /// <summary>
        /// Gets or Sets WeaponConfigurationTypeUse
        /// </summary>
        [DataMember(Name = "weaponConfigurationTypeUse", EmitDefaultValue = false)]
        public List<WeaponConfigurationType> WeaponConfigurationTypeUse { get; set; }

        /// <summary>
        /// Gets or Sets WeaponConfigurationTypes
        /// </summary>
        [DataMember(Name = "weaponConfigurationTypes", EmitDefaultValue = false)]
        public List<OverviewWeaponConfigurationType> WeaponConfigurationTypes { get; set; }

        /// <summary>
        /// Gets or Sets Names
        /// </summary>
        [DataMember(Name = "names", EmitDefaultValue = false)]
        public List<string> Names { get; set; }

        /// <summary>
        /// Gets or Sets Accounts
        /// </summary>
        [DataMember(Name = "accounts", EmitDefaultValue = false)]
        public List<string> Accounts { get; set; }

        /// <summary>
        /// Gets or Sets LadderRanks
        /// </summary>
        [DataMember(Name = "ladderRanks", EmitDefaultValue = false)]
        public List<int?> LadderRanks { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedUtc
        /// </summary>
        [DataMember(Name = "updatedUtc", IsRequired = true, EmitDefaultValue = false)]
        public DateTime UpdatedUtc { get; set; }

        /// <summary>
        /// Gets or Sets SkillModes
        /// </summary>
        [DataMember(Name = "skillModes", EmitDefaultValue = false)]
        public List<OverviewSkillMode> SkillModes { get; set; }

        /// <summary>
        /// Gets or Sets SkillModeUse
        /// </summary>
        [DataMember(Name = "skillModeUse", EmitDefaultValue = false)]
        public Dictionary<string, List<int>> SkillModeUse { get; set; }

        /// <summary>
        /// Gets or Sets SkillDetails
        /// </summary>
        [DataMember(Name = "skillDetails", EmitDefaultValue = false)]
        public List<SkillDetailsInfo> SkillDetails { get; set; }

        /// <summary>
        /// Gets or Sets DelveSolo
        /// </summary>
        [DataMember(Name = "delveSolo", EmitDefaultValue = false)]
        public List<int> DelveSolo { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public TranslationLanguage Language { get; set; }

        /// <summary>
        /// Gets or Sets Intervals
        /// </summary>
        [DataMember(Name = "intervals", EmitDefaultValue = false)]
        public List<int> Intervals { get; set; }

        /// <summary>
        /// Gets or Sets IntervalNames
        /// </summary>
        [DataMember(Name = "intervalNames", EmitDefaultValue = false)]
        public List<string> IntervalNames { get; set; }

        /// <summary>
        /// Gets or Sets Leagues
        /// </summary>
        [DataMember(Name = "leagues", EmitDefaultValue = false)]
        public List<int> Leagues { get; set; }

        /// <summary>
        /// Gets or Sets LeagueNames
        /// </summary>
        [DataMember(Name = "leagueNames", EmitDefaultValue = false)]
        public List<string> LeagueNames { get; set; }

        /// <summary>
        /// Gets or Sets TwitchAccounts
        /// </summary>
        [DataMember(Name = "twitchAccounts", EmitDefaultValue = false)]
        public List<string> TwitchAccounts { get; set; }

        /// <summary>
        /// Gets or Sets TwitchNames
        /// </summary>
        [DataMember(Name = "twitchNames", EmitDefaultValue = false)]
        public List<string> TwitchNames { get; set; }

        /// <summary>
        /// Gets or Sets Online
        /// </summary>
        [DataMember(Name = "online", EmitDefaultValue = false)]
        public List<bool> Online { get; set; }

        /// <summary>
        /// Gets or Sets UniqueItemTooltips
        /// </summary>
        [DataMember(Name = "uniqueItemTooltips", EmitDefaultValue = false)]
        public List<bool> UniqueItemTooltips { get; set; }

        /// <summary>
        /// Gets or Sets KeystoneTooltips
        /// </summary>
        [DataMember(Name = "keystoneTooltips", EmitDefaultValue = false)]
        public List<bool> KeystoneTooltips { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverviewSnapshot {\n");
            sb.Append("  ClassNames: ").Append(ClassNames).Append("\n");
            sb.Append("  Classes: ").Append(Classes).Append("\n");
            sb.Append("  UniqueItems: ").Append(UniqueItems).Append("\n");
            sb.Append("  UniqueItemUse: ").Append(UniqueItemUse).Append("\n");
            sb.Append("  ActiveSkills: ").Append(ActiveSkills).Append("\n");
            sb.Append("  ActiveSkillUse: ").Append(ActiveSkillUse).Append("\n");
            sb.Append("  AllSkills: ").Append(AllSkills).Append("\n");
            sb.Append("  AllSkillUse: ").Append(AllSkillUse).Append("\n");
            sb.Append("  Keystones: ").Append(Keystones).Append("\n");
            sb.Append("  KeystoneUse: ").Append(KeystoneUse).Append("\n");
            sb.Append("  Levels: ").Append(Levels).Append("\n");
            sb.Append("  Life: ").Append(Life).Append("\n");
            sb.Append("  EnergyShield: ").Append(EnergyShield).Append("\n");
            sb.Append("  WeaponConfigurationTypeUse: ").Append(WeaponConfigurationTypeUse).Append("\n");
            sb.Append("  WeaponConfigurationTypes: ").Append(WeaponConfigurationTypes).Append("\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  LadderRanks: ").Append(LadderRanks).Append("\n");
            sb.Append("  UpdatedUtc: ").Append(UpdatedUtc).Append("\n");
            sb.Append("  SkillModes: ").Append(SkillModes).Append("\n");
            sb.Append("  SkillModeUse: ").Append(SkillModeUse).Append("\n");
            sb.Append("  SkillDetails: ").Append(SkillDetails).Append("\n");
            sb.Append("  DelveSolo: ").Append(DelveSolo).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Intervals: ").Append(Intervals).Append("\n");
            sb.Append("  IntervalNames: ").Append(IntervalNames).Append("\n");
            sb.Append("  Leagues: ").Append(Leagues).Append("\n");
            sb.Append("  LeagueNames: ").Append(LeagueNames).Append("\n");
            sb.Append("  TwitchAccounts: ").Append(TwitchAccounts).Append("\n");
            sb.Append("  TwitchNames: ").Append(TwitchNames).Append("\n");
            sb.Append("  Online: ").Append(Online).Append("\n");
            sb.Append("  UniqueItemTooltips: ").Append(UniqueItemTooltips).Append("\n");
            sb.Append("  KeystoneTooltips: ").Append(KeystoneTooltips).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OverviewSnapshot);
        }

        /// <summary>
        /// Returns true if OverviewSnapshot instances are equal
        /// </summary>
        /// <param name="input">Instance of OverviewSnapshot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverviewSnapshot input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ClassNames == input.ClassNames ||
                    this.ClassNames != null &&
                    input.ClassNames != null &&
                    this.ClassNames.SequenceEqual(input.ClassNames)
                ) &&
                (
                    this.Classes == input.Classes ||
                    this.Classes != null &&
                    input.Classes != null &&
                    this.Classes.SequenceEqual(input.Classes)
                ) &&
                (
                    this.UniqueItems == input.UniqueItems ||
                    this.UniqueItems != null &&
                    input.UniqueItems != null &&
                    this.UniqueItems.SequenceEqual(input.UniqueItems)
                ) &&
                (
                    this.UniqueItemUse == input.UniqueItemUse ||
                    this.UniqueItemUse != null &&
                    input.UniqueItemUse != null &&
                    this.UniqueItemUse.SequenceEqual(input.UniqueItemUse)
                ) &&
                (
                    this.ActiveSkills == input.ActiveSkills ||
                    this.ActiveSkills != null &&
                    input.ActiveSkills != null &&
                    this.ActiveSkills.SequenceEqual(input.ActiveSkills)
                ) &&
                (
                    this.ActiveSkillUse == input.ActiveSkillUse ||
                    this.ActiveSkillUse != null &&
                    input.ActiveSkillUse != null &&
                    this.ActiveSkillUse.SequenceEqual(input.ActiveSkillUse)
                ) &&
                (
                    this.AllSkills == input.AllSkills ||
                    this.AllSkills != null &&
                    input.AllSkills != null &&
                    this.AllSkills.SequenceEqual(input.AllSkills)
                ) &&
                (
                    this.AllSkillUse == input.AllSkillUse ||
                    this.AllSkillUse != null &&
                    input.AllSkillUse != null &&
                    this.AllSkillUse.SequenceEqual(input.AllSkillUse)
                ) &&
                (
                    this.Keystones == input.Keystones ||
                    this.Keystones != null &&
                    input.Keystones != null &&
                    this.Keystones.SequenceEqual(input.Keystones)
                ) &&
                (
                    this.KeystoneUse == input.KeystoneUse ||
                    this.KeystoneUse != null &&
                    input.KeystoneUse != null &&
                    this.KeystoneUse.SequenceEqual(input.KeystoneUse)
                ) &&
                (
                    this.Levels == input.Levels ||
                    this.Levels != null &&
                    input.Levels != null &&
                    this.Levels.SequenceEqual(input.Levels)
                ) &&
                (
                    this.Life == input.Life ||
                    this.Life != null &&
                    input.Life != null &&
                    this.Life.SequenceEqual(input.Life)
                ) &&
                (
                    this.EnergyShield == input.EnergyShield ||
                    this.EnergyShield != null &&
                    input.EnergyShield != null &&
                    this.EnergyShield.SequenceEqual(input.EnergyShield)
                ) &&
                (
                    this.WeaponConfigurationTypeUse == input.WeaponConfigurationTypeUse ||
                    this.WeaponConfigurationTypeUse != null &&
                    input.WeaponConfigurationTypeUse != null &&
                    this.WeaponConfigurationTypeUse.SequenceEqual(input.WeaponConfigurationTypeUse)
                ) &&
                (
                    this.WeaponConfigurationTypes == input.WeaponConfigurationTypes ||
                    this.WeaponConfigurationTypes != null &&
                    input.WeaponConfigurationTypes != null &&
                    this.WeaponConfigurationTypes.SequenceEqual(input.WeaponConfigurationTypes)
                ) &&
                (
                    this.Names == input.Names ||
                    this.Names != null &&
                    input.Names != null &&
                    this.Names.SequenceEqual(input.Names)
                ) &&
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    input.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                ) &&
                (
                    this.LadderRanks == input.LadderRanks ||
                    this.LadderRanks != null &&
                    input.LadderRanks != null &&
                    this.LadderRanks.SequenceEqual(input.LadderRanks)
                ) &&
                (
                    this.UpdatedUtc == input.UpdatedUtc ||
                    (this.UpdatedUtc != null &&
                    this.UpdatedUtc.Equals(input.UpdatedUtc))
                ) &&
                (
                    this.SkillModes == input.SkillModes ||
                    this.SkillModes != null &&
                    input.SkillModes != null &&
                    this.SkillModes.SequenceEqual(input.SkillModes)
                ) &&
                (
                    this.SkillModeUse == input.SkillModeUse ||
                    this.SkillModeUse != null &&
                    input.SkillModeUse != null &&
                    this.SkillModeUse.SequenceEqual(input.SkillModeUse)
                ) &&
                (
                    this.SkillDetails == input.SkillDetails ||
                    this.SkillDetails != null &&
                    input.SkillDetails != null &&
                    this.SkillDetails.SequenceEqual(input.SkillDetails)
                ) &&
                (
                    this.DelveSolo == input.DelveSolo ||
                    this.DelveSolo != null &&
                    input.DelveSolo != null &&
                    this.DelveSolo.SequenceEqual(input.DelveSolo)
                ) &&
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) &&
                (
                    this.Intervals == input.Intervals ||
                    this.Intervals != null &&
                    input.Intervals != null &&
                    this.Intervals.SequenceEqual(input.Intervals)
                ) &&
                (
                    this.IntervalNames == input.IntervalNames ||
                    this.IntervalNames != null &&
                    input.IntervalNames != null &&
                    this.IntervalNames.SequenceEqual(input.IntervalNames)
                ) &&
                (
                    this.Leagues == input.Leagues ||
                    this.Leagues != null &&
                    input.Leagues != null &&
                    this.Leagues.SequenceEqual(input.Leagues)
                ) &&
                (
                    this.LeagueNames == input.LeagueNames ||
                    this.LeagueNames != null &&
                    input.LeagueNames != null &&
                    this.LeagueNames.SequenceEqual(input.LeagueNames)
                ) &&
                (
                    this.TwitchAccounts == input.TwitchAccounts ||
                    this.TwitchAccounts != null &&
                    input.TwitchAccounts != null &&
                    this.TwitchAccounts.SequenceEqual(input.TwitchAccounts)
                ) &&
                (
                    this.TwitchNames == input.TwitchNames ||
                    this.TwitchNames != null &&
                    input.TwitchNames != null &&
                    this.TwitchNames.SequenceEqual(input.TwitchNames)
                ) &&
                (
                    this.Online == input.Online ||
                    this.Online != null &&
                    input.Online != null &&
                    this.Online.SequenceEqual(input.Online)
                ) &&
                (
                    this.UniqueItemTooltips == input.UniqueItemTooltips ||
                    this.UniqueItemTooltips != null &&
                    input.UniqueItemTooltips != null &&
                    this.UniqueItemTooltips.SequenceEqual(input.UniqueItemTooltips)
                ) &&
                (
                    this.KeystoneTooltips == input.KeystoneTooltips ||
                    this.KeystoneTooltips != null &&
                    input.KeystoneTooltips != null &&
                    this.KeystoneTooltips.SequenceEqual(input.KeystoneTooltips)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClassNames != null)
                    hashCode = hashCode * 59 + this.ClassNames.GetHashCode();
                if (this.Classes != null)
                    hashCode = hashCode * 59 + this.Classes.GetHashCode();
                if (this.UniqueItems != null)
                    hashCode = hashCode * 59 + this.UniqueItems.GetHashCode();
                if (this.UniqueItemUse != null)
                    hashCode = hashCode * 59 + this.UniqueItemUse.GetHashCode();
                if (this.ActiveSkills != null)
                    hashCode = hashCode * 59 + this.ActiveSkills.GetHashCode();
                if (this.ActiveSkillUse != null)
                    hashCode = hashCode * 59 + this.ActiveSkillUse.GetHashCode();
                if (this.AllSkills != null)
                    hashCode = hashCode * 59 + this.AllSkills.GetHashCode();
                if (this.AllSkillUse != null)
                    hashCode = hashCode * 59 + this.AllSkillUse.GetHashCode();
                if (this.Keystones != null)
                    hashCode = hashCode * 59 + this.Keystones.GetHashCode();
                if (this.KeystoneUse != null)
                    hashCode = hashCode * 59 + this.KeystoneUse.GetHashCode();
                if (this.Levels != null)
                    hashCode = hashCode * 59 + this.Levels.GetHashCode();
                if (this.Life != null)
                    hashCode = hashCode * 59 + this.Life.GetHashCode();
                if (this.EnergyShield != null)
                    hashCode = hashCode * 59 + this.EnergyShield.GetHashCode();
                if (this.WeaponConfigurationTypeUse != null)
                    hashCode = hashCode * 59 + this.WeaponConfigurationTypeUse.GetHashCode();
                if (this.WeaponConfigurationTypes != null)
                    hashCode = hashCode * 59 + this.WeaponConfigurationTypes.GetHashCode();
                if (this.Names != null)
                    hashCode = hashCode * 59 + this.Names.GetHashCode();
                if (this.Accounts != null)
                    hashCode = hashCode * 59 + this.Accounts.GetHashCode();
                if (this.LadderRanks != null)
                    hashCode = hashCode * 59 + this.LadderRanks.GetHashCode();
                if (this.UpdatedUtc != null)
                    hashCode = hashCode * 59 + this.UpdatedUtc.GetHashCode();
                if (this.SkillModes != null)
                    hashCode = hashCode * 59 + this.SkillModes.GetHashCode();
                if (this.SkillModeUse != null)
                    hashCode = hashCode * 59 + this.SkillModeUse.GetHashCode();
                if (this.SkillDetails != null)
                    hashCode = hashCode * 59 + this.SkillDetails.GetHashCode();
                if (this.DelveSolo != null)
                    hashCode = hashCode * 59 + this.DelveSolo.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Intervals != null)
                    hashCode = hashCode * 59 + this.Intervals.GetHashCode();
                if (this.IntervalNames != null)
                    hashCode = hashCode * 59 + this.IntervalNames.GetHashCode();
                if (this.Leagues != null)
                    hashCode = hashCode * 59 + this.Leagues.GetHashCode();
                if (this.LeagueNames != null)
                    hashCode = hashCode * 59 + this.LeagueNames.GetHashCode();
                if (this.TwitchAccounts != null)
                    hashCode = hashCode * 59 + this.TwitchAccounts.GetHashCode();
                if (this.TwitchNames != null)
                    hashCode = hashCode * 59 + this.TwitchNames.GetHashCode();
                if (this.Online != null)
                    hashCode = hashCode * 59 + this.Online.GetHashCode();
                if (this.UniqueItemTooltips != null)
                    hashCode = hashCode * 59 + this.UniqueItemTooltips.GetHashCode();
                if (this.KeystoneTooltips != null)
                    hashCode = hashCode * 59 + this.KeystoneTooltips.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
