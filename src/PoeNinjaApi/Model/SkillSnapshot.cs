/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PoeNinjaApi.Client.OpenAPIDateConverter;

namespace PoeNinjaApi.Model
{
    /// <summary>
    /// SkillSnapshot
    /// </summary>
    [DataContract(Name = "SkillSnapshot")]
    public partial class SkillSnapshot : IEquatable<SkillSnapshot>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ItemSlot
        /// </summary>
        [DataMember(Name = "itemSlot", IsRequired = true, EmitDefaultValue = false)]
        public ItemSlot ItemSlot { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SkillSnapshot" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SkillSnapshot() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SkillSnapshot" /> class.
        /// </summary>
        /// <param name="gem">gem.</param>
        /// <param name="supportGems">supportGems.</param>
        /// <param name="itemSlot">itemSlot (required).</param>
        /// <param name="allGems">allGems.</param>
        /// <param name="dps">dps.</param>
        public SkillSnapshot(GemSnapshot gem = default(GemSnapshot), List<GemSnapshot> supportGems = default(List<GemSnapshot>), ItemSlot itemSlot = default(ItemSlot), List<GemSnapshot> allGems = default(List<GemSnapshot>), List<SkillSnapshotDps> dps = default(List<SkillSnapshotDps>))
        {
            this.ItemSlot = itemSlot;
            this.Gem = gem;
            this.SupportGems = supportGems;
            this.AllGems = allGems;
            this.Dps = dps;
        }

        /// <summary>
        /// Gets or Sets Gem
        /// </summary>
        [DataMember(Name = "gem", EmitDefaultValue = false)]
        public GemSnapshot Gem { get; set; }

        /// <summary>
        /// Gets or Sets SupportGems
        /// </summary>
        [DataMember(Name = "supportGems", EmitDefaultValue = false)]
        public List<GemSnapshot> SupportGems { get; set; }

        /// <summary>
        /// Gets or Sets AllGems
        /// </summary>
        [DataMember(Name = "allGems", EmitDefaultValue = false)]
        public List<GemSnapshot> AllGems { get; set; }

        /// <summary>
        /// Gets or Sets Dps
        /// </summary>
        [DataMember(Name = "dps", EmitDefaultValue = false)]
        public List<SkillSnapshotDps> Dps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SkillSnapshot {\n");
            sb.Append("  Gem: ").Append(Gem).Append("\n");
            sb.Append("  SupportGems: ").Append(SupportGems).Append("\n");
            sb.Append("  ItemSlot: ").Append(ItemSlot).Append("\n");
            sb.Append("  AllGems: ").Append(AllGems).Append("\n");
            sb.Append("  Dps: ").Append(Dps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SkillSnapshot);
        }

        /// <summary>
        /// Returns true if SkillSnapshot instances are equal
        /// </summary>
        /// <param name="input">Instance of SkillSnapshot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SkillSnapshot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gem == input.Gem ||
                    (this.Gem != null &&
                    this.Gem.Equals(input.Gem))
                ) && 
                (
                    this.SupportGems == input.SupportGems ||
                    this.SupportGems != null &&
                    input.SupportGems != null &&
                    this.SupportGems.SequenceEqual(input.SupportGems)
                ) && 
                (
                    this.ItemSlot == input.ItemSlot ||
                    this.ItemSlot.Equals(input.ItemSlot)
                ) && 
                (
                    this.AllGems == input.AllGems ||
                    this.AllGems != null &&
                    input.AllGems != null &&
                    this.AllGems.SequenceEqual(input.AllGems)
                ) && 
                (
                    this.Dps == input.Dps ||
                    this.Dps != null &&
                    input.Dps != null &&
                    this.Dps.SequenceEqual(input.Dps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gem != null)
                    hashCode = hashCode * 59 + this.Gem.GetHashCode();
                if (this.SupportGems != null)
                    hashCode = hashCode * 59 + this.SupportGems.GetHashCode();
                hashCode = hashCode * 59 + this.ItemSlot.GetHashCode();
                if (this.AllGems != null)
                    hashCode = hashCode * 59 + this.AllGems.GetHashCode();
                if (this.Dps != null)
                    hashCode = hashCode * 59 + this.Dps.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
