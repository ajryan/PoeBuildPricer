/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PoeNinjaApi.Client.OpenAPIDateConverter;

namespace PoeNinjaApi.Model
{
    /// <summary>
    /// CurrencyHistory
    /// </summary>
    [DataContract(Name = "CurrencyHistory")]
    public partial class CurrencyHistory : IEquatable<CurrencyHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyHistory" /> class.
        /// </summary>
        /// <param name="payCurrencyGraphData">payCurrencyGraphData.</param>
        /// <param name="receiveCurrencyGraphData">receiveCurrencyGraphData.</param>
        public CurrencyHistory(List<GraphData> payCurrencyGraphData = default(List<GraphData>), List<GraphData> receiveCurrencyGraphData = default(List<GraphData>))
        {
            this.PayCurrencyGraphData = payCurrencyGraphData;
            this.ReceiveCurrencyGraphData = receiveCurrencyGraphData;
        }

        /// <summary>
        /// Gets or Sets PayCurrencyGraphData
        /// </summary>
        [DataMember(Name = "payCurrencyGraphData", EmitDefaultValue = false)]
        public List<GraphData> PayCurrencyGraphData { get; set; }

        /// <summary>
        /// Gets or Sets ReceiveCurrencyGraphData
        /// </summary>
        [DataMember(Name = "receiveCurrencyGraphData", EmitDefaultValue = false)]
        public List<GraphData> ReceiveCurrencyGraphData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyHistory {\n");
            sb.Append("  PayCurrencyGraphData: ").Append(PayCurrencyGraphData).Append("\n");
            sb.Append("  ReceiveCurrencyGraphData: ").Append(ReceiveCurrencyGraphData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyHistory);
        }

        /// <summary>
        /// Returns true if CurrencyHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayCurrencyGraphData == input.PayCurrencyGraphData ||
                    this.PayCurrencyGraphData != null &&
                    input.PayCurrencyGraphData != null &&
                    this.PayCurrencyGraphData.SequenceEqual(input.PayCurrencyGraphData)
                ) && 
                (
                    this.ReceiveCurrencyGraphData == input.ReceiveCurrencyGraphData ||
                    this.ReceiveCurrencyGraphData != null &&
                    input.ReceiveCurrencyGraphData != null &&
                    this.ReceiveCurrencyGraphData.SequenceEqual(input.ReceiveCurrencyGraphData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayCurrencyGraphData != null)
                    hashCode = hashCode * 59 + this.PayCurrencyGraphData.GetHashCode();
                if (this.ReceiveCurrencyGraphData != null)
                    hashCode = hashCode * 59 + this.ReceiveCurrencyGraphData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
