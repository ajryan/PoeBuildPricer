/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PoeNinjaApi.Client.OpenAPIDateConverter;

namespace PoeNinjaApi.Model
{
    /// <summary>
    /// StatInfoOfOverviewSkillMode
    /// </summary>
    [DataContract(Name = "StatInfoOfOverviewSkillMode")]
    public partial class StatInfoOfOverviewSkillMode : IEquatable<StatInfoOfOverviewSkillMode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatInfoOfOverviewSkillMode" /> class.
        /// </summary>
        /// <param name="names">names.</param>
        /// <param name="use">use.</param>
        /// <param name="dictionary">dictionary.</param>
        public StatInfoOfOverviewSkillMode(List<OverviewSkillMode> names = default(List<OverviewSkillMode>), Dictionary<string, List<int>> use = default(Dictionary<string, List<int>>), Dictionary<string, int> dictionary = default(Dictionary<string, int>))
        {
            this.Names = names;
            this.Use = use;
            this.Dictionary = dictionary;
        }

        /// <summary>
        /// Gets or Sets Names
        /// </summary>
        [DataMember(Name = "names", EmitDefaultValue = false)]
        public List<OverviewSkillMode> Names { get; set; }

        /// <summary>
        /// Gets or Sets Use
        /// </summary>
        [DataMember(Name = "use", EmitDefaultValue = false)]
        public Dictionary<string, List<int>> Use { get; set; }

        /// <summary>
        /// Gets or Sets Dictionary
        /// </summary>
        [DataMember(Name = "dictionary", EmitDefaultValue = false)]
        public Dictionary<string, int> Dictionary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatInfoOfOverviewSkillMode {\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("  Dictionary: ").Append(Dictionary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatInfoOfOverviewSkillMode);
        }

        /// <summary>
        /// Returns true if StatInfoOfOverviewSkillMode instances are equal
        /// </summary>
        /// <param name="input">Instance of StatInfoOfOverviewSkillMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatInfoOfOverviewSkillMode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Names == input.Names ||
                    this.Names != null &&
                    input.Names != null &&
                    this.Names.SequenceEqual(input.Names)
                ) && 
                (
                    this.Use == input.Use ||
                    this.Use != null &&
                    input.Use != null &&
                    this.Use.SequenceEqual(input.Use)
                ) && 
                (
                    this.Dictionary == input.Dictionary ||
                    this.Dictionary != null &&
                    input.Dictionary != null &&
                    this.Dictionary.SequenceEqual(input.Dictionary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Names != null)
                    hashCode = hashCode * 59 + this.Names.GetHashCode();
                if (this.Use != null)
                    hashCode = hashCode * 59 + this.Use.GetHashCode();
                if (this.Dictionary != null)
                    hashCode = hashCode * 59 + this.Dictionary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
