/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PoeNinjaApi.Client.OpenAPIDateConverter;

namespace PoeNinjaApi.Model
{
    /// <summary>
    /// CurrencyOverviewModel
    /// </summary>
    [DataContract(Name = "CurrencyOverviewModel")]
    public partial class CurrencyOverviewModel : IEquatable<CurrencyOverviewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyOverviewModel" /> class.
        /// </summary>
        /// <param name="lines">lines.</param>
        /// <param name="currencyDetails">currencyDetails.</param>
        /// <param name="language">language.</param>
        public CurrencyOverviewModel(List<CurrencyOverviewLineModel> lines = default(List<CurrencyOverviewLineModel>), List<CurrencyDetailsModel> currencyDetails = default(List<CurrencyDetailsModel>), TranslationLanguage language = default(TranslationLanguage))
        {
            this.Lines = lines;
            this.CurrencyDetails = currencyDetails;
            this.Language = language;
        }

        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name = "lines", EmitDefaultValue = false)]
        public List<CurrencyOverviewLineModel> Lines { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyDetails
        /// </summary>
        [DataMember(Name = "currencyDetails", EmitDefaultValue = false)]
        public List<CurrencyDetailsModel> CurrencyDetails { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public TranslationLanguage Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyOverviewModel {\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  CurrencyDetails: ").Append(CurrencyDetails).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyOverviewModel);
        }

        /// <summary>
        /// Returns true if CurrencyOverviewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyOverviewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyOverviewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Lines == input.Lines ||
                    this.Lines != null &&
                    input.Lines != null &&
                    this.Lines.SequenceEqual(input.Lines)
                ) && 
                (
                    this.CurrencyDetails == input.CurrencyDetails ||
                    this.CurrencyDetails != null &&
                    input.CurrencyDetails != null &&
                    this.CurrencyDetails.SequenceEqual(input.CurrencyDetails)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Lines != null)
                    hashCode = hashCode * 59 + this.Lines.GetHashCode();
                if (this.CurrencyDetails != null)
                    hashCode = hashCode * 59 + this.CurrencyDetails.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
