/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PoeNinjaApi.Client.OpenAPIDateConverter;

namespace PoeNinjaApi.Model
{
    /// <summary>
    /// DefensiveStats
    /// </summary>
    [DataContract(Name = "DefensiveStats")]
    public partial class DefensiveStats : IEquatable<DefensiveStats>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ItemSetType
        /// </summary>
        [DataMember(Name = "itemSetType", IsRequired = true, EmitDefaultValue = false)]
        public ItemSetType ItemSetType { get; set; }
        /// <summary>
        /// Gets or Sets WeaponConfigurationType
        /// </summary>
        [DataMember(Name = "weaponConfigurationType", IsRequired = true, EmitDefaultValue = false)]
        public WeaponConfigurationType WeaponConfigurationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DefensiveStats" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DefensiveStats() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DefensiveStats" /> class.
        /// </summary>
        /// <param name="strength">strength (required).</param>
        /// <param name="dexterity">dexterity (required).</param>
        /// <param name="intelligence">intelligence (required).</param>
        /// <param name="enduranceCharges">enduranceCharges (required).</param>
        /// <param name="frenzyCharges">frenzyCharges (required).</param>
        /// <param name="powerCharges">powerCharges (required).</param>
        /// <param name="itemSetType">itemSetType (required).</param>
        /// <param name="weaponConfigurationType">weaponConfigurationType (required).</param>
        /// <param name="life">life (required).</param>
        /// <param name="energyShield">energyShield (required).</param>
        /// <param name="mana">mana (required).</param>
        /// <param name="evasionRating">evasionRating (required).</param>
        /// <param name="armour">armour (required).</param>
        public DefensiveStats(decimal strength = default(decimal), decimal dexterity = default(decimal), decimal intelligence = default(decimal), decimal enduranceCharges = default(decimal), decimal frenzyCharges = default(decimal), decimal powerCharges = default(decimal), ItemSetType itemSetType = default(ItemSetType), WeaponConfigurationType weaponConfigurationType = default(WeaponConfigurationType), int life = default(int), int energyShield = default(int), int mana = default(int), int evasionRating = default(int), int armour = default(int))
        {
            this.Strength = strength;
            this.Dexterity = dexterity;
            this.Intelligence = intelligence;
            this.EnduranceCharges = enduranceCharges;
            this.FrenzyCharges = frenzyCharges;
            this.PowerCharges = powerCharges;
            this.ItemSetType = itemSetType;
            this.WeaponConfigurationType = weaponConfigurationType;
            this.Life = life;
            this.EnergyShield = energyShield;
            this.Mana = mana;
            this.EvasionRating = evasionRating;
            this.Armour = armour;
        }

        /// <summary>
        /// Gets or Sets Strength
        /// </summary>
        [DataMember(Name = "strength", IsRequired = true, EmitDefaultValue = false)]
        public decimal Strength { get; set; }

        /// <summary>
        /// Gets or Sets Dexterity
        /// </summary>
        [DataMember(Name = "dexterity", IsRequired = true, EmitDefaultValue = false)]
        public decimal Dexterity { get; set; }

        /// <summary>
        /// Gets or Sets Intelligence
        /// </summary>
        [DataMember(Name = "intelligence", IsRequired = true, EmitDefaultValue = false)]
        public decimal Intelligence { get; set; }

        /// <summary>
        /// Gets or Sets EnduranceCharges
        /// </summary>
        [DataMember(Name = "enduranceCharges", IsRequired = true, EmitDefaultValue = false)]
        public decimal EnduranceCharges { get; set; }

        /// <summary>
        /// Gets or Sets FrenzyCharges
        /// </summary>
        [DataMember(Name = "frenzyCharges", IsRequired = true, EmitDefaultValue = false)]
        public decimal FrenzyCharges { get; set; }

        /// <summary>
        /// Gets or Sets PowerCharges
        /// </summary>
        [DataMember(Name = "powerCharges", IsRequired = true, EmitDefaultValue = false)]
        public decimal PowerCharges { get; set; }

        /// <summary>
        /// Gets or Sets Life
        /// </summary>
        [DataMember(Name = "life", IsRequired = true, EmitDefaultValue = false)]
        public int Life { get; set; }

        /// <summary>
        /// Gets or Sets EnergyShield
        /// </summary>
        [DataMember(Name = "energyShield", IsRequired = true, EmitDefaultValue = false)]
        public int EnergyShield { get; set; }

        /// <summary>
        /// Gets or Sets Mana
        /// </summary>
        [DataMember(Name = "mana", IsRequired = true, EmitDefaultValue = false)]
        public int Mana { get; set; }

        /// <summary>
        /// Gets or Sets EvasionRating
        /// </summary>
        [DataMember(Name = "evasionRating", IsRequired = true, EmitDefaultValue = false)]
        public int EvasionRating { get; set; }

        /// <summary>
        /// Gets or Sets Armour
        /// </summary>
        [DataMember(Name = "armour", IsRequired = true, EmitDefaultValue = false)]
        public int Armour { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DefensiveStats {\n");
            sb.Append("  Strength: ").Append(Strength).Append("\n");
            sb.Append("  Dexterity: ").Append(Dexterity).Append("\n");
            sb.Append("  Intelligence: ").Append(Intelligence).Append("\n");
            sb.Append("  EnduranceCharges: ").Append(EnduranceCharges).Append("\n");
            sb.Append("  FrenzyCharges: ").Append(FrenzyCharges).Append("\n");
            sb.Append("  PowerCharges: ").Append(PowerCharges).Append("\n");
            sb.Append("  ItemSetType: ").Append(ItemSetType).Append("\n");
            sb.Append("  WeaponConfigurationType: ").Append(WeaponConfigurationType).Append("\n");
            sb.Append("  Life: ").Append(Life).Append("\n");
            sb.Append("  EnergyShield: ").Append(EnergyShield).Append("\n");
            sb.Append("  Mana: ").Append(Mana).Append("\n");
            sb.Append("  EvasionRating: ").Append(EvasionRating).Append("\n");
            sb.Append("  Armour: ").Append(Armour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DefensiveStats);
        }

        /// <summary>
        /// Returns true if DefensiveStats instances are equal
        /// </summary>
        /// <param name="input">Instance of DefensiveStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefensiveStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Strength == input.Strength ||
                    this.Strength.Equals(input.Strength)
                ) && 
                (
                    this.Dexterity == input.Dexterity ||
                    this.Dexterity.Equals(input.Dexterity)
                ) && 
                (
                    this.Intelligence == input.Intelligence ||
                    this.Intelligence.Equals(input.Intelligence)
                ) && 
                (
                    this.EnduranceCharges == input.EnduranceCharges ||
                    this.EnduranceCharges.Equals(input.EnduranceCharges)
                ) && 
                (
                    this.FrenzyCharges == input.FrenzyCharges ||
                    this.FrenzyCharges.Equals(input.FrenzyCharges)
                ) && 
                (
                    this.PowerCharges == input.PowerCharges ||
                    this.PowerCharges.Equals(input.PowerCharges)
                ) && 
                (
                    this.ItemSetType == input.ItemSetType ||
                    this.ItemSetType.Equals(input.ItemSetType)
                ) && 
                (
                    this.WeaponConfigurationType == input.WeaponConfigurationType ||
                    this.WeaponConfigurationType.Equals(input.WeaponConfigurationType)
                ) && 
                (
                    this.Life == input.Life ||
                    this.Life.Equals(input.Life)
                ) && 
                (
                    this.EnergyShield == input.EnergyShield ||
                    this.EnergyShield.Equals(input.EnergyShield)
                ) && 
                (
                    this.Mana == input.Mana ||
                    this.Mana.Equals(input.Mana)
                ) && 
                (
                    this.EvasionRating == input.EvasionRating ||
                    this.EvasionRating.Equals(input.EvasionRating)
                ) && 
                (
                    this.Armour == input.Armour ||
                    this.Armour.Equals(input.Armour)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Strength.GetHashCode();
                hashCode = hashCode * 59 + this.Dexterity.GetHashCode();
                hashCode = hashCode * 59 + this.Intelligence.GetHashCode();
                hashCode = hashCode * 59 + this.EnduranceCharges.GetHashCode();
                hashCode = hashCode * 59 + this.FrenzyCharges.GetHashCode();
                hashCode = hashCode * 59 + this.PowerCharges.GetHashCode();
                hashCode = hashCode * 59 + this.ItemSetType.GetHashCode();
                hashCode = hashCode * 59 + this.WeaponConfigurationType.GetHashCode();
                hashCode = hashCode * 59 + this.Life.GetHashCode();
                hashCode = hashCode * 59 + this.EnergyShield.GetHashCode();
                hashCode = hashCode * 59 + this.Mana.GetHashCode();
                hashCode = hashCode * 59 + this.EvasionRating.GetHashCode();
                hashCode = hashCode * 59 + this.Armour.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
