/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PoeNinjaApi.Client.OpenAPIDateConverter;

namespace PoeNinjaApi.Model
{
    /// <summary>
    /// CharModel
    /// </summary>
    [DataContract(Name = "CharModel")]
    public partial class CharModel : IEquatable<CharModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public CharacterStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharModel" /> class.
        /// </summary>
        /// <param name="account">account.</param>
        /// <param name="name">name.</param>
        /// <param name="league">league.</param>
        /// <param name="defensiveStats">defensiveStats.</param>
        /// <param name="skills">skills.</param>
        /// <param name="level">level (required).</param>
        /// <param name="_class">_class.</param>
        /// <param name="pathOfBuildingExport">pathOfBuildingExport.</param>
        /// <param name="items">items.</param>
        /// <param name="passiveTreeUrl">passiveTreeUrl.</param>
        /// <param name="keyStones">keyStones.</param>
        /// <param name="flasks">flasks.</param>
        /// <param name="jewels">jewels.</param>
        /// <param name="passiveSelection">passiveSelection.</param>
        /// <param name="lastSeenUtc">lastSeenUtc.</param>
        /// <param name="updatedUtc">updatedUtc.</param>
        /// <param name="lastCheckedUtc">lastCheckedUtc.</param>
        /// <param name="status">status (required).</param>
        /// <param name="pobData">pobData.</param>
        /// <param name="language">language.</param>
        /// <param name="itemProvidedGems">itemProvidedGems.</param>
        public CharModel(string account = default(string), string name = default(string), string league = default(string), DefensiveStats defensiveStats = default(DefensiveStats), List<SkillSnapshot> skills = default(List<SkillSnapshot>), int level = default(int), string _class = default(string), string pathOfBuildingExport = default(string), List<ItemModel> items = default(List<ItemModel>), string passiveTreeUrl = default(string), List<KeystoneValue> keyStones = default(List<KeystoneValue>), List<ItemModel> flasks = default(List<ItemModel>), List<ItemModel> jewels = default(List<ItemModel>), List<int> passiveSelection = default(List<int>), DateTime lastSeenUtc = default(DateTime), DateTime updatedUtc = default(DateTime), DateTime lastCheckedUtc = default(DateTime), CharacterStatus status = default(CharacterStatus), Object pobData = default(Object), TranslationLanguage language = default(TranslationLanguage), List<ProvidedGemsModel> itemProvidedGems = default(List<ProvidedGemsModel>))
        {
            this.Level = level;
            this.Status = status;
            this.Account = account;
            this.Name = name;
            this.League = league;
            this.DefensiveStats = defensiveStats;
            this.Skills = skills;
            this.Class = _class;
            this.PathOfBuildingExport = pathOfBuildingExport;
            this.Items = items;
            this.PassiveTreeUrl = passiveTreeUrl;
            this.KeyStones = keyStones;
            this.Flasks = flasks;
            this.Jewels = jewels;
            this.PassiveSelection = passiveSelection;
            this.LastSeenUtc = lastSeenUtc;
            this.UpdatedUtc = updatedUtc;
            this.LastCheckedUtc = lastCheckedUtc;
            this.PobData = pobData;
            this.Language = language;
            this.ItemProvidedGems = itemProvidedGems;
        }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets League
        /// </summary>
        [DataMember(Name = "league", EmitDefaultValue = false)]
        public string League { get; set; }

        /// <summary>
        /// Gets or Sets DefensiveStats
        /// </summary>
        [DataMember(Name = "defensiveStats", EmitDefaultValue = false)]
        public DefensiveStats DefensiveStats { get; set; }

        /// <summary>
        /// Gets or Sets Skills
        /// </summary>
        [DataMember(Name = "skills", EmitDefaultValue = false)]
        public List<SkillSnapshot> Skills { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name = "level", IsRequired = true, EmitDefaultValue = false)]
        public int Level { get; set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [DataMember(Name = "class", EmitDefaultValue = false)]
        public string Class { get; set; }

        /// <summary>
        /// Gets or Sets PathOfBuildingExport
        /// </summary>
        [DataMember(Name = "pathOfBuildingExport", EmitDefaultValue = false)]
        public string PathOfBuildingExport { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<ItemModel> Items { get; set; }

        /// <summary>
        /// Gets or Sets PassiveTreeUrl
        /// </summary>
        [DataMember(Name = "passiveTreeUrl", EmitDefaultValue = false)]
        public string PassiveTreeUrl { get; set; }

        /// <summary>
        /// Gets or Sets KeyStones
        /// </summary>
        [DataMember(Name = "keyStones", EmitDefaultValue = false)]
        public List<KeystoneValue> KeyStones { get; set; }

        /// <summary>
        /// Gets or Sets Flasks
        /// </summary>
        [DataMember(Name = "flasks", EmitDefaultValue = false)]
        public List<ItemModel> Flasks { get; set; }

        /// <summary>
        /// Gets or Sets Jewels
        /// </summary>
        [DataMember(Name = "jewels", EmitDefaultValue = false)]
        public List<ItemModel> Jewels { get; set; }

        /// <summary>
        /// Gets or Sets PassiveSelection
        /// </summary>
        [DataMember(Name = "passiveSelection", EmitDefaultValue = false)]
        public List<int> PassiveSelection { get; set; }

        /// <summary>
        /// Gets or Sets LastSeenUtc
        /// </summary>
        [DataMember(Name = "lastSeenUtc", EmitDefaultValue = false)]
        public DateTime LastSeenUtc { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedUtc
        /// </summary>
        [DataMember(Name = "updatedUtc", EmitDefaultValue = false)]
        public DateTime UpdatedUtc { get; set; }

        /// <summary>
        /// Gets or Sets LastCheckedUtc
        /// </summary>
        [DataMember(Name = "lastCheckedUtc", EmitDefaultValue = false)]
        public DateTime LastCheckedUtc { get; set; }

        /// <summary>
        /// Gets or Sets PobData
        /// </summary>
        [DataMember(Name = "pobData", EmitDefaultValue = false)]
        public Object PobData { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public TranslationLanguage Language { get; set; }

        /// <summary>
        /// Gets or Sets ItemProvidedGems
        /// </summary>
        [DataMember(Name = "itemProvidedGems", EmitDefaultValue = false)]
        public List<ProvidedGemsModel> ItemProvidedGems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CharModel {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  League: ").Append(League).Append("\n");
            sb.Append("  DefensiveStats: ").Append(DefensiveStats).Append("\n");
            sb.Append("  Skills: ").Append(Skills).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  PathOfBuildingExport: ").Append(PathOfBuildingExport).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PassiveTreeUrl: ").Append(PassiveTreeUrl).Append("\n");
            sb.Append("  KeyStones: ").Append(KeyStones).Append("\n");
            sb.Append("  Flasks: ").Append(Flasks).Append("\n");
            sb.Append("  Jewels: ").Append(Jewels).Append("\n");
            sb.Append("  PassiveSelection: ").Append(PassiveSelection).Append("\n");
            sb.Append("  LastSeenUtc: ").Append(LastSeenUtc).Append("\n");
            sb.Append("  UpdatedUtc: ").Append(UpdatedUtc).Append("\n");
            sb.Append("  LastCheckedUtc: ").Append(LastCheckedUtc).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PobData: ").Append(PobData).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ItemProvidedGems: ").Append(ItemProvidedGems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CharModel);
        }

        /// <summary>
        /// Returns true if CharModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CharModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CharModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.League == input.League ||
                    (this.League != null &&
                    this.League.Equals(input.League))
                ) && 
                (
                    this.DefensiveStats == input.DefensiveStats ||
                    (this.DefensiveStats != null &&
                    this.DefensiveStats.Equals(input.DefensiveStats))
                ) && 
                (
                    this.Skills == input.Skills ||
                    this.Skills != null &&
                    input.Skills != null &&
                    this.Skills.SequenceEqual(input.Skills)
                ) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.Class == input.Class ||
                    (this.Class != null &&
                    this.Class.Equals(input.Class))
                ) && 
                (
                    this.PathOfBuildingExport == input.PathOfBuildingExport ||
                    (this.PathOfBuildingExport != null &&
                    this.PathOfBuildingExport.Equals(input.PathOfBuildingExport))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.PassiveTreeUrl == input.PassiveTreeUrl ||
                    (this.PassiveTreeUrl != null &&
                    this.PassiveTreeUrl.Equals(input.PassiveTreeUrl))
                ) && 
                (
                    this.KeyStones == input.KeyStones ||
                    this.KeyStones != null &&
                    input.KeyStones != null &&
                    this.KeyStones.SequenceEqual(input.KeyStones)
                ) && 
                (
                    this.Flasks == input.Flasks ||
                    this.Flasks != null &&
                    input.Flasks != null &&
                    this.Flasks.SequenceEqual(input.Flasks)
                ) && 
                (
                    this.Jewels == input.Jewels ||
                    this.Jewels != null &&
                    input.Jewels != null &&
                    this.Jewels.SequenceEqual(input.Jewels)
                ) && 
                (
                    this.PassiveSelection == input.PassiveSelection ||
                    this.PassiveSelection != null &&
                    input.PassiveSelection != null &&
                    this.PassiveSelection.SequenceEqual(input.PassiveSelection)
                ) && 
                (
                    this.LastSeenUtc == input.LastSeenUtc ||
                    (this.LastSeenUtc != null &&
                    this.LastSeenUtc.Equals(input.LastSeenUtc))
                ) && 
                (
                    this.UpdatedUtc == input.UpdatedUtc ||
                    (this.UpdatedUtc != null &&
                    this.UpdatedUtc.Equals(input.UpdatedUtc))
                ) && 
                (
                    this.LastCheckedUtc == input.LastCheckedUtc ||
                    (this.LastCheckedUtc != null &&
                    this.LastCheckedUtc.Equals(input.LastCheckedUtc))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.PobData == input.PobData ||
                    (this.PobData != null &&
                    this.PobData.Equals(input.PobData))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.ItemProvidedGems == input.ItemProvidedGems ||
                    this.ItemProvidedGems != null &&
                    input.ItemProvidedGems != null &&
                    this.ItemProvidedGems.SequenceEqual(input.ItemProvidedGems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.League != null)
                    hashCode = hashCode * 59 + this.League.GetHashCode();
                if (this.DefensiveStats != null)
                    hashCode = hashCode * 59 + this.DefensiveStats.GetHashCode();
                if (this.Skills != null)
                    hashCode = hashCode * 59 + this.Skills.GetHashCode();
                hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.Class != null)
                    hashCode = hashCode * 59 + this.Class.GetHashCode();
                if (this.PathOfBuildingExport != null)
                    hashCode = hashCode * 59 + this.PathOfBuildingExport.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.PassiveTreeUrl != null)
                    hashCode = hashCode * 59 + this.PassiveTreeUrl.GetHashCode();
                if (this.KeyStones != null)
                    hashCode = hashCode * 59 + this.KeyStones.GetHashCode();
                if (this.Flasks != null)
                    hashCode = hashCode * 59 + this.Flasks.GetHashCode();
                if (this.Jewels != null)
                    hashCode = hashCode * 59 + this.Jewels.GetHashCode();
                if (this.PassiveSelection != null)
                    hashCode = hashCode * 59 + this.PassiveSelection.GetHashCode();
                if (this.LastSeenUtc != null)
                    hashCode = hashCode * 59 + this.LastSeenUtc.GetHashCode();
                if (this.UpdatedUtc != null)
                    hashCode = hashCode * 59 + this.UpdatedUtc.GetHashCode();
                if (this.LastCheckedUtc != null)
                    hashCode = hashCode * 59 + this.LastCheckedUtc.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.PobData != null)
                    hashCode = hashCode * 59 + this.PobData.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.ItemProvidedGems != null)
                    hashCode = hashCode * 59 + this.ItemProvidedGems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
