/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PoeNinjaApi.Client.OpenAPIDateConverter;

namespace PoeNinjaApi.Model
{
    /// <summary>
    /// CurrencyOverviewLineModel
    /// </summary>
    [DataContract(Name = "CurrencyOverviewLineModel")]
    public partial class CurrencyOverviewLineModel : IEquatable<CurrencyOverviewLineModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyOverviewLineModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurrencyOverviewLineModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyOverviewLineModel" /> class.
        /// </summary>
        /// <param name="currencyTypeName">currencyTypeName.</param>
        /// <param name="pay">pay.</param>
        /// <param name="receive">receive.</param>
        /// <param name="paySparkLine">paySparkLine.</param>
        /// <param name="receiveSparkLine">receiveSparkLine.</param>
        /// <param name="chaosEquivalent">chaosEquivalent (required).</param>
        /// <param name="lowConfidencePaySparkLine">lowConfidencePaySparkLine.</param>
        /// <param name="lowConfidenceReceiveSparkLine">lowConfidenceReceiveSparkLine.</param>
        /// <param name="detailsId">detailsId.</param>
        public CurrencyOverviewLineModel(string currencyTypeName = default(string), CurrencyDataPoint pay = default(CurrencyDataPoint), CurrencyDataPoint receive = default(CurrencyDataPoint), SparkLineInfo paySparkLine = default(SparkLineInfo), SparkLineInfo receiveSparkLine = default(SparkLineInfo), decimal chaosEquivalent = default(decimal), SparkLineInfo lowConfidencePaySparkLine = default(SparkLineInfo), SparkLineInfo lowConfidenceReceiveSparkLine = default(SparkLineInfo), string detailsId = default(string))
        {
            this.ChaosEquivalent = chaosEquivalent;
            this.CurrencyTypeName = currencyTypeName;
            this.Pay = pay;
            this.Receive = receive;
            this.PaySparkLine = paySparkLine;
            this.ReceiveSparkLine = receiveSparkLine;
            this.LowConfidencePaySparkLine = lowConfidencePaySparkLine;
            this.LowConfidenceReceiveSparkLine = lowConfidenceReceiveSparkLine;
            this.DetailsId = detailsId;
        }

        /// <summary>
        /// Gets or Sets CurrencyTypeName
        /// </summary>
        [DataMember(Name = "currencyTypeName", EmitDefaultValue = false)]
        public string CurrencyTypeName { get; set; }

        /// <summary>
        /// Gets or Sets Pay
        /// </summary>
        [DataMember(Name = "pay", EmitDefaultValue = false)]
        public CurrencyDataPoint Pay { get; set; }

        /// <summary>
        /// Gets or Sets Receive
        /// </summary>
        [DataMember(Name = "receive", EmitDefaultValue = false)]
        public CurrencyDataPoint Receive { get; set; }

        /// <summary>
        /// Gets or Sets PaySparkLine
        /// </summary>
        [DataMember(Name = "paySparkLine", EmitDefaultValue = false)]
        public SparkLineInfo PaySparkLine { get; set; }

        /// <summary>
        /// Gets or Sets ReceiveSparkLine
        /// </summary>
        [DataMember(Name = "receiveSparkLine", EmitDefaultValue = false)]
        public SparkLineInfo ReceiveSparkLine { get; set; }

        /// <summary>
        /// Gets or Sets ChaosEquivalent
        /// </summary>
        [DataMember(Name = "chaosEquivalent", IsRequired = true, EmitDefaultValue = false)]
        public decimal ChaosEquivalent { get; set; }

        /// <summary>
        /// Gets or Sets LowConfidencePaySparkLine
        /// </summary>
        [DataMember(Name = "lowConfidencePaySparkLine", EmitDefaultValue = false)]
        public SparkLineInfo LowConfidencePaySparkLine { get; set; }

        /// <summary>
        /// Gets or Sets LowConfidenceReceiveSparkLine
        /// </summary>
        [DataMember(Name = "lowConfidenceReceiveSparkLine", EmitDefaultValue = false)]
        public SparkLineInfo LowConfidenceReceiveSparkLine { get; set; }

        /// <summary>
        /// Gets or Sets DetailsId
        /// </summary>
        [DataMember(Name = "detailsId", EmitDefaultValue = false)]
        public string DetailsId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyOverviewLineModel {\n");
            sb.Append("  CurrencyTypeName: ").Append(CurrencyTypeName).Append("\n");
            sb.Append("  Pay: ").Append(Pay).Append("\n");
            sb.Append("  Receive: ").Append(Receive).Append("\n");
            sb.Append("  PaySparkLine: ").Append(PaySparkLine).Append("\n");
            sb.Append("  ReceiveSparkLine: ").Append(ReceiveSparkLine).Append("\n");
            sb.Append("  ChaosEquivalent: ").Append(ChaosEquivalent).Append("\n");
            sb.Append("  LowConfidencePaySparkLine: ").Append(LowConfidencePaySparkLine).Append("\n");
            sb.Append("  LowConfidenceReceiveSparkLine: ").Append(LowConfidenceReceiveSparkLine).Append("\n");
            sb.Append("  DetailsId: ").Append(DetailsId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyOverviewLineModel);
        }

        /// <summary>
        /// Returns true if CurrencyOverviewLineModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyOverviewLineModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyOverviewLineModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyTypeName == input.CurrencyTypeName ||
                    (this.CurrencyTypeName != null &&
                    this.CurrencyTypeName.Equals(input.CurrencyTypeName))
                ) && 
                (
                    this.Pay == input.Pay ||
                    (this.Pay != null &&
                    this.Pay.Equals(input.Pay))
                ) && 
                (
                    this.Receive == input.Receive ||
                    (this.Receive != null &&
                    this.Receive.Equals(input.Receive))
                ) && 
                (
                    this.PaySparkLine == input.PaySparkLine ||
                    (this.PaySparkLine != null &&
                    this.PaySparkLine.Equals(input.PaySparkLine))
                ) && 
                (
                    this.ReceiveSparkLine == input.ReceiveSparkLine ||
                    (this.ReceiveSparkLine != null &&
                    this.ReceiveSparkLine.Equals(input.ReceiveSparkLine))
                ) && 
                (
                    this.ChaosEquivalent == input.ChaosEquivalent ||
                    this.ChaosEquivalent.Equals(input.ChaosEquivalent)
                ) && 
                (
                    this.LowConfidencePaySparkLine == input.LowConfidencePaySparkLine ||
                    (this.LowConfidencePaySparkLine != null &&
                    this.LowConfidencePaySparkLine.Equals(input.LowConfidencePaySparkLine))
                ) && 
                (
                    this.LowConfidenceReceiveSparkLine == input.LowConfidenceReceiveSparkLine ||
                    (this.LowConfidenceReceiveSparkLine != null &&
                    this.LowConfidenceReceiveSparkLine.Equals(input.LowConfidenceReceiveSparkLine))
                ) && 
                (
                    this.DetailsId == input.DetailsId ||
                    (this.DetailsId != null &&
                    this.DetailsId.Equals(input.DetailsId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyTypeName != null)
                    hashCode = hashCode * 59 + this.CurrencyTypeName.GetHashCode();
                if (this.Pay != null)
                    hashCode = hashCode * 59 + this.Pay.GetHashCode();
                if (this.Receive != null)
                    hashCode = hashCode * 59 + this.Receive.GetHashCode();
                if (this.PaySparkLine != null)
                    hashCode = hashCode * 59 + this.PaySparkLine.GetHashCode();
                if (this.ReceiveSparkLine != null)
                    hashCode = hashCode * 59 + this.ReceiveSparkLine.GetHashCode();
                hashCode = hashCode * 59 + this.ChaosEquivalent.GetHashCode();
                if (this.LowConfidencePaySparkLine != null)
                    hashCode = hashCode * 59 + this.LowConfidencePaySparkLine.GetHashCode();
                if (this.LowConfidenceReceiveSparkLine != null)
                    hashCode = hashCode * 59 + this.LowConfidenceReceiveSparkLine.GetHashCode();
                if (this.DetailsId != null)
                    hashCode = hashCode * 59 + this.DetailsId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
