/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PoeNinjaApi.Client.OpenAPIDateConverter;

namespace PoeNinjaApi.Model
{
    /// <summary>
    /// ItemOverviewLineModel
    /// </summary>
    [DataContract(Name = "ItemOverviewLineModel")]
    public partial class ItemOverviewLineModel : IEquatable<ItemOverviewLineModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ItemClass
        /// </summary>
        [DataMember(Name = "itemClass", IsRequired = true, EmitDefaultValue = false)]
        public ItemClass ItemClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemOverviewLineModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemOverviewLineModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemOverviewLineModel" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="icon">icon.</param>
        /// <param name="mapTier">mapTier (required).</param>
        /// <param name="levelRequired">levelRequired (required).</param>
        /// <param name="baseType">baseType.</param>
        /// <param name="stackSize">stackSize (required).</param>
        /// <param name="variant">variant.</param>
        /// <param name="prophecyText">prophecyText.</param>
        /// <param name="artFilename">artFilename.</param>
        /// <param name="links">links (required).</param>
        /// <param name="itemClass">itemClass (required).</param>
        /// <param name="sparkline">sparkline.</param>
        /// <param name="lowConfidenceSparkline">lowConfidenceSparkline.</param>
        /// <param name="implicitModifiers">implicitModifiers.</param>
        /// <param name="explicitModifiers">explicitModifiers.</param>
        /// <param name="flavourText">flavourText.</param>
        /// <param name="corrupted">corrupted (required).</param>
        /// <param name="gemLevel">gemLevel (required).</param>
        /// <param name="gemQuality">gemQuality (required).</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="chaosValue">chaosValue (required).</param>
        /// <param name="exaltedValue">exaltedValue (required).</param>
        /// <param name="count">count (required).</param>
        /// <param name="detailsId">detailsId.</param>
        /// <param name="tradeInfo">tradeInfo.</param>
        /// <param name="mapRegion">mapRegion.</param>
        /// <param name="listingCount">listingCount.</param>
        public ItemOverviewLineModel(int id = default(int), string name = default(string), string icon = default(string), int mapTier = default(int), int levelRequired = default(int), string baseType = default(string), int stackSize = default(int), string variant = default(string), string prophecyText = default(string), string artFilename = default(string), int links = default(int), ItemClass itemClass = default(ItemClass), SparkLineInfo sparkline = default(SparkLineInfo), SparkLineInfo lowConfidenceSparkline = default(SparkLineInfo), List<OverviewModifier> implicitModifiers = default(List<OverviewModifier>), List<OverviewModifier> explicitModifiers = default(List<OverviewModifier>), string flavourText = default(string), bool corrupted = default(bool), int gemLevel = default(int), int gemQuality = default(int), string itemType = default(string), decimal chaosValue = default(decimal), decimal exaltedValue = default(decimal), int count = default(int), string detailsId = default(string), TradeInfo tradeInfo = default(TradeInfo), string mapRegion = default(string), long listingCount = default(long))
        {
            this.Id = id;
            this.MapTier = mapTier;
            this.LevelRequired = levelRequired;
            this.StackSize = stackSize;
            this.Links = links;
            this.ItemClass = itemClass;
            this.Corrupted = corrupted;
            this.GemLevel = gemLevel;
            this.GemQuality = gemQuality;
            this.ChaosValue = chaosValue;
            this.ExaltedValue = exaltedValue;
            this.Count = count;
            this.Name = name;
            this.Icon = icon;
            this.BaseType = baseType;
            this.Variant = variant;
            this.ProphecyText = prophecyText;
            this.ArtFilename = artFilename;
            this.Sparkline = sparkline;
            this.LowConfidenceSparkline = lowConfidenceSparkline;
            this.ImplicitModifiers = implicitModifiers;
            this.ExplicitModifiers = explicitModifiers;
            this.FlavourText = flavourText;
            this.ItemType = itemType;
            this.DetailsId = detailsId;
            this.TradeInfo = tradeInfo;
            this.MapRegion = mapRegion;
            this.ListingCount = listingCount;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets MapTier
        /// </summary>
        [DataMember(Name = "mapTier", IsRequired = true, EmitDefaultValue = false)]
        public int MapTier { get; set; }

        /// <summary>
        /// Gets or Sets LevelRequired
        /// </summary>
        [DataMember(Name = "levelRequired", IsRequired = true, EmitDefaultValue = false)]
        public int LevelRequired { get; set; }

        /// <summary>
        /// Gets or Sets BaseType
        /// </summary>
        [DataMember(Name = "baseType", EmitDefaultValue = false)]
        public string BaseType { get; set; }

        /// <summary>
        /// Gets or Sets StackSize
        /// </summary>
        [DataMember(Name = "stackSize", IsRequired = true, EmitDefaultValue = false)]
        public int StackSize { get; set; }

        /// <summary>
        /// Gets or Sets Variant
        /// </summary>
        [DataMember(Name = "variant", EmitDefaultValue = false)]
        public string Variant { get; set; }

        /// <summary>
        /// Gets or Sets ProphecyText
        /// </summary>
        [DataMember(Name = "prophecyText", EmitDefaultValue = false)]
        public string ProphecyText { get; set; }

        /// <summary>
        /// Gets or Sets ArtFilename
        /// </summary>
        [DataMember(Name = "artFilename", EmitDefaultValue = false)]
        public string ArtFilename { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", IsRequired = true, EmitDefaultValue = false)]
        public int Links { get; set; }

        /// <summary>
        /// Gets or Sets Sparkline
        /// </summary>
        [DataMember(Name = "sparkline", EmitDefaultValue = false)]
        public SparkLineInfo Sparkline { get; set; }

        /// <summary>
        /// Gets or Sets LowConfidenceSparkline
        /// </summary>
        [DataMember(Name = "lowConfidenceSparkline", EmitDefaultValue = false)]
        public SparkLineInfo LowConfidenceSparkline { get; set; }

        /// <summary>
        /// Gets or Sets ImplicitModifiers
        /// </summary>
        [DataMember(Name = "implicitModifiers", EmitDefaultValue = false)]
        public List<OverviewModifier> ImplicitModifiers { get; set; }

        /// <summary>
        /// Gets or Sets ExplicitModifiers
        /// </summary>
        [DataMember(Name = "explicitModifiers", EmitDefaultValue = false)]
        public List<OverviewModifier> ExplicitModifiers { get; set; }

        /// <summary>
        /// Gets or Sets FlavourText
        /// </summary>
        [DataMember(Name = "flavourText", EmitDefaultValue = false)]
        public string FlavourText { get; set; }

        /// <summary>
        /// Gets or Sets Corrupted
        /// </summary>
        [DataMember(Name = "corrupted", IsRequired = true, EmitDefaultValue = false)]
        public bool Corrupted { get; set; }

        /// <summary>
        /// Gets or Sets GemLevel
        /// </summary>
        [DataMember(Name = "gemLevel", IsRequired = true, EmitDefaultValue = false)]
        public int GemLevel { get; set; }

        /// <summary>
        /// Gets or Sets GemQuality
        /// </summary>
        [DataMember(Name = "gemQuality", IsRequired = true, EmitDefaultValue = false)]
        public int GemQuality { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "itemType", EmitDefaultValue = false)]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets ChaosValue
        /// </summary>
        [DataMember(Name = "chaosValue", IsRequired = true, EmitDefaultValue = false)]
        public decimal ChaosValue { get; set; }

        /// <summary>
        /// Gets or Sets ExaltedValue
        /// </summary>
        [DataMember(Name = "exaltedValue", IsRequired = true, EmitDefaultValue = false)]
        public decimal ExaltedValue { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets DetailsId
        /// </summary>
        [DataMember(Name = "detailsId", EmitDefaultValue = false)]
        public string DetailsId { get; set; }

        /// <summary>
        /// Gets or Sets TradeInfo
        /// </summary>
        [DataMember(Name = "tradeInfo", EmitDefaultValue = false)]
        public TradeInfo TradeInfo { get; set; }

        /// <summary>
        /// Gets or Sets MapRegion
        /// </summary>
        [DataMember(Name = "mapRegion", EmitDefaultValue = false)]
        public string MapRegion { get; set; }

        /// <summary>
        /// Gets or Sets ListingCount
        /// </summary>
        [DataMember(Name = "listingCount", EmitDefaultValue = false)]
        public long ListingCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemOverviewLineModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  MapTier: ").Append(MapTier).Append("\n");
            sb.Append("  LevelRequired: ").Append(LevelRequired).Append("\n");
            sb.Append("  BaseType: ").Append(BaseType).Append("\n");
            sb.Append("  StackSize: ").Append(StackSize).Append("\n");
            sb.Append("  Variant: ").Append(Variant).Append("\n");
            sb.Append("  ProphecyText: ").Append(ProphecyText).Append("\n");
            sb.Append("  ArtFilename: ").Append(ArtFilename).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  ItemClass: ").Append(ItemClass).Append("\n");
            sb.Append("  Sparkline: ").Append(Sparkline).Append("\n");
            sb.Append("  LowConfidenceSparkline: ").Append(LowConfidenceSparkline).Append("\n");
            sb.Append("  ImplicitModifiers: ").Append(ImplicitModifiers).Append("\n");
            sb.Append("  ExplicitModifiers: ").Append(ExplicitModifiers).Append("\n");
            sb.Append("  FlavourText: ").Append(FlavourText).Append("\n");
            sb.Append("  Corrupted: ").Append(Corrupted).Append("\n");
            sb.Append("  GemLevel: ").Append(GemLevel).Append("\n");
            sb.Append("  GemQuality: ").Append(GemQuality).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  ChaosValue: ").Append(ChaosValue).Append("\n");
            sb.Append("  ExaltedValue: ").Append(ExaltedValue).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  DetailsId: ").Append(DetailsId).Append("\n");
            sb.Append("  TradeInfo: ").Append(TradeInfo).Append("\n");
            sb.Append("  MapRegion: ").Append(MapRegion).Append("\n");
            sb.Append("  ListingCount: ").Append(ListingCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemOverviewLineModel);
        }

        /// <summary>
        /// Returns true if ItemOverviewLineModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemOverviewLineModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemOverviewLineModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.MapTier == input.MapTier ||
                    this.MapTier.Equals(input.MapTier)
                ) && 
                (
                    this.LevelRequired == input.LevelRequired ||
                    this.LevelRequired.Equals(input.LevelRequired)
                ) && 
                (
                    this.BaseType == input.BaseType ||
                    (this.BaseType != null &&
                    this.BaseType.Equals(input.BaseType))
                ) && 
                (
                    this.StackSize == input.StackSize ||
                    this.StackSize.Equals(input.StackSize)
                ) && 
                (
                    this.Variant == input.Variant ||
                    (this.Variant != null &&
                    this.Variant.Equals(input.Variant))
                ) && 
                (
                    this.ProphecyText == input.ProphecyText ||
                    (this.ProphecyText != null &&
                    this.ProphecyText.Equals(input.ProphecyText))
                ) && 
                (
                    this.ArtFilename == input.ArtFilename ||
                    (this.ArtFilename != null &&
                    this.ArtFilename.Equals(input.ArtFilename))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links.Equals(input.Links)
                ) && 
                (
                    this.ItemClass == input.ItemClass ||
                    this.ItemClass.Equals(input.ItemClass)
                ) && 
                (
                    this.Sparkline == input.Sparkline ||
                    (this.Sparkline != null &&
                    this.Sparkline.Equals(input.Sparkline))
                ) && 
                (
                    this.LowConfidenceSparkline == input.LowConfidenceSparkline ||
                    (this.LowConfidenceSparkline != null &&
                    this.LowConfidenceSparkline.Equals(input.LowConfidenceSparkline))
                ) && 
                (
                    this.ImplicitModifiers == input.ImplicitModifiers ||
                    this.ImplicitModifiers != null &&
                    input.ImplicitModifiers != null &&
                    this.ImplicitModifiers.SequenceEqual(input.ImplicitModifiers)
                ) && 
                (
                    this.ExplicitModifiers == input.ExplicitModifiers ||
                    this.ExplicitModifiers != null &&
                    input.ExplicitModifiers != null &&
                    this.ExplicitModifiers.SequenceEqual(input.ExplicitModifiers)
                ) && 
                (
                    this.FlavourText == input.FlavourText ||
                    (this.FlavourText != null &&
                    this.FlavourText.Equals(input.FlavourText))
                ) && 
                (
                    this.Corrupted == input.Corrupted ||
                    this.Corrupted.Equals(input.Corrupted)
                ) && 
                (
                    this.GemLevel == input.GemLevel ||
                    this.GemLevel.Equals(input.GemLevel)
                ) && 
                (
                    this.GemQuality == input.GemQuality ||
                    this.GemQuality.Equals(input.GemQuality)
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.ChaosValue == input.ChaosValue ||
                    this.ChaosValue.Equals(input.ChaosValue)
                ) && 
                (
                    this.ExaltedValue == input.ExaltedValue ||
                    this.ExaltedValue.Equals(input.ExaltedValue)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.DetailsId == input.DetailsId ||
                    (this.DetailsId != null &&
                    this.DetailsId.Equals(input.DetailsId))
                ) && 
                (
                    this.TradeInfo == input.TradeInfo ||
                    (this.TradeInfo != null &&
                    this.TradeInfo.Equals(input.TradeInfo))
                ) && 
                (
                    this.MapRegion == input.MapRegion ||
                    (this.MapRegion != null &&
                    this.MapRegion.Equals(input.MapRegion))
                ) && 
                (
                    this.ListingCount == input.ListingCount ||
                    this.ListingCount.Equals(input.ListingCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                hashCode = hashCode * 59 + this.MapTier.GetHashCode();
                hashCode = hashCode * 59 + this.LevelRequired.GetHashCode();
                if (this.BaseType != null)
                    hashCode = hashCode * 59 + this.BaseType.GetHashCode();
                hashCode = hashCode * 59 + this.StackSize.GetHashCode();
                if (this.Variant != null)
                    hashCode = hashCode * 59 + this.Variant.GetHashCode();
                if (this.ProphecyText != null)
                    hashCode = hashCode * 59 + this.ProphecyText.GetHashCode();
                if (this.ArtFilename != null)
                    hashCode = hashCode * 59 + this.ArtFilename.GetHashCode();
                hashCode = hashCode * 59 + this.Links.GetHashCode();
                hashCode = hashCode * 59 + this.ItemClass.GetHashCode();
                if (this.Sparkline != null)
                    hashCode = hashCode * 59 + this.Sparkline.GetHashCode();
                if (this.LowConfidenceSparkline != null)
                    hashCode = hashCode * 59 + this.LowConfidenceSparkline.GetHashCode();
                if (this.ImplicitModifiers != null)
                    hashCode = hashCode * 59 + this.ImplicitModifiers.GetHashCode();
                if (this.ExplicitModifiers != null)
                    hashCode = hashCode * 59 + this.ExplicitModifiers.GetHashCode();
                if (this.FlavourText != null)
                    hashCode = hashCode * 59 + this.FlavourText.GetHashCode();
                hashCode = hashCode * 59 + this.Corrupted.GetHashCode();
                hashCode = hashCode * 59 + this.GemLevel.GetHashCode();
                hashCode = hashCode * 59 + this.GemQuality.GetHashCode();
                if (this.ItemType != null)
                    hashCode = hashCode * 59 + this.ItemType.GetHashCode();
                hashCode = hashCode * 59 + this.ChaosValue.GetHashCode();
                hashCode = hashCode * 59 + this.ExaltedValue.GetHashCode();
                hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.DetailsId != null)
                    hashCode = hashCode * 59 + this.DetailsId.GetHashCode();
                if (this.TradeInfo != null)
                    hashCode = hashCode * 59 + this.TradeInfo.GetHashCode();
                if (this.MapRegion != null)
                    hashCode = hashCode * 59 + this.MapRegion.GetHashCode();
                hashCode = hashCode * 59 + this.ListingCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
