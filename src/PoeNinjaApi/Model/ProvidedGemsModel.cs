/*
 * poe.ninja API
 *
 * Public API of poe.ninja (mainly economy for now).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PoeNinjaApi.Client.OpenAPIDateConverter;

namespace PoeNinjaApi.Model
{
    /// <summary>
    /// ProvidedGemsModel
    /// </summary>
    [DataContract(Name = "ProvidedGemsModel")]
    public partial class ProvidedGemsModel : IEquatable<ProvidedGemsModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Slot
        /// </summary>
        [DataMember(Name = "slot", IsRequired = true, EmitDefaultValue = false)]
        public ItemSlot Slot { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvidedGemsModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProvidedGemsModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvidedGemsModel" /> class.
        /// </summary>
        /// <param name="slot">slot (required).</param>
        /// <param name="gems">gems.</param>
        public ProvidedGemsModel(ItemSlot slot = default(ItemSlot), List<GemSnapshot> gems = default(List<GemSnapshot>))
        {
            this.Slot = slot;
            this.Gems = gems;
        }

        /// <summary>
        /// Gets or Sets Gems
        /// </summary>
        [DataMember(Name = "gems", EmitDefaultValue = false)]
        public List<GemSnapshot> Gems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvidedGemsModel {\n");
            sb.Append("  Slot: ").Append(Slot).Append("\n");
            sb.Append("  Gems: ").Append(Gems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvidedGemsModel);
        }

        /// <summary>
        /// Returns true if ProvidedGemsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvidedGemsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvidedGemsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Slot == input.Slot ||
                    this.Slot.Equals(input.Slot)
                ) && 
                (
                    this.Gems == input.Gems ||
                    this.Gems != null &&
                    input.Gems != null &&
                    this.Gems.SequenceEqual(input.Gems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Slot.GetHashCode();
                if (this.Gems != null)
                    hashCode = hashCode * 59 + this.Gems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
